"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import type { TeamDetails, Transaction } from "@/types/user"
//import { expenseCategories, incomeCategories } from "@/data/categories"

interface TransactionFilterDialogProps {
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  onApplyFilters: (filters: {
    creators: string[]
    categories: string[]
    type: "all" | "income" | "expense"
  }) => void
  initialFilters: {
    creators: string[]
    categories: string[]
    type: "all" | "income" | "expense"
  }
  allTransactions: Transaction[]
  team?: TeamDetails
}

export function TransactionFilterDialog({
  isOpen,
  onOpenChange,
  onApplyFilters,
  initialFilters,
  allTransactions,
  team,
}: TransactionFilterDialogProps) {
  const [selectedCreators, setSelectedCreators] = useState<string[]>(initialFilters.creators)
  const [selectedCategories, setSelectedCategories] = useState<string[]>(initialFilters.categories)
  const [selectedType, setSelectedType] = useState<"all" | "income" | "expense">(initialFilters.type)

  const uniqueCreators = Array.from(new Set(allTransactions.map((t) => t.createdBy)))
  const getTeamCategories = () => {
    if (!team?.categories || team.categories.length === 0) {
      // S·ª¨A: Fallback categories n·∫øu team ch∆∞a c√≥
      const defaultCategories = [
        { name: "ƒÇn u·ªëng", icon: "üçΩÔ∏è" },
        { name: "Di chuy·ªÉn", icon: "üöó" },
        { name: "Mua s·∫Øm", icon: "üõí" },
        { name: "Gi·∫£i tr√≠", icon: "üé¨" },
        { name: "S·ª©c kh·ªèe", icon: "üè•" },
        { name: "L∆∞∆°ng", icon: "üí∞" },
        { name: "Th∆∞·ªüng", icon: "üéÅ" },
        { name: "ƒê·∫ßu t∆∞", icon: "üìà" },
        { name: "B√°n h√†ng", icon: "üõçÔ∏è" },
        { name: "Kh√°c", icon: "üì¶" }
      ];
      return defaultCategories;
    }

    // S·ª¨A: Parse team categories n·∫øu l√† JSON string
    let categories;
    try {
      categories = typeof team.categories === 'string' 
        ? JSON.parse(team.categories) 
        : team.categories;
    } catch {
      categories = [];
    }

    return categories;
  };
  const teamCategories = getTeamCategories();
  const allAvailableCategories = Array.from(
    new Set(teamCategories.map((c) => c.name))
  );


  const handleCreatorChange = (creator: string, checked: boolean) => {
    setSelectedCreators((prev) => (checked ? [...prev, creator] : prev.filter((c) => c !== creator)))
  }

  const handleCategoryChange = (category: string, checked: boolean) => {
    setSelectedCategories((prev) => (checked ? [...prev, category] : prev.filter((c) => c !== category)))
  }

  const handleApply = () => {
    onApplyFilters({
      creators: selectedCreators,
      categories: selectedCategories,
      type: selectedType,
    })
    onOpenChange(false)
  }

  const handleCancel = () => {
    onOpenChange(false)
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md p-6 rounded-2xl bg-white shadow-lg">
        <DialogHeader>
          <DialogTitle>L·ªçc giao d·ªãch</DialogTitle>
        </DialogHeader>
        <div className="space-y-6">
          {/* Filter by Creator */}
          <div>
            <Label className="text-sm font-medium text-gray-700 mb-2 block">Ng∆∞·ªùi nh·∫≠p giao d·ªãch</Label>
            <div className="grid grid-cols-2 gap-2 max-h-40 overflow-y-auto pr-2">
              {uniqueCreators.map((creator) => (
                <div key={creator} className="flex items-center space-x-2">
                  <Checkbox
                    id={`creator-${creator}`}
                    checked={selectedCreators.includes(creator)}
                    onCheckedChange={(checked) => handleCreatorChange(creator, checked as boolean)}
                  />
                  <Label htmlFor={`creator-${creator}`} className="text-sm font-normal">
                    {creator}
                  </Label>
                </div>
              ))}
            </div>
          </div>

          {/* Filter by Category */}
          <div>
          <Label className="text-sm font-medium text-gray-700 mb-2 block">Danh m·ª•c</Label>
            <div className="grid grid-cols-2 gap-2 max-h-40 overflow-y-auto pr-2">
              {allAvailableCategories.length > 0 ? (
                allAvailableCategories.map((category) => {
                  // S·ª¨A: T√¨m category object ƒë·ªÉ l·∫•y icon
                  const categoryObj = teamCategories.find(c => c.name === category);
                  
                  return (
                    <div key={category} className="flex items-center space-x-2">
                      <Checkbox
                        id={`category-${category}`}
                        checked={selectedCategories.includes(category)}
                        onCheckedChange={(checked) => handleCategoryChange(category, checked as boolean)}
                      />
                      <Label htmlFor={`category-${category}`} className="text-sm font-normal flex items-center gap-1">
                        {/* S·ª¨A: Hi·ªÉn th·ªã icon n·∫øu c√≥ */}
                        {categoryObj?.icon && <span>{categoryObj.icon}</span>}
                        <span>{category}</span>
                      </Label>
                    </div>
                  );
                })
              ) : (
                <div className="col-span-2 text-center text-gray-500 text-sm">
                  Kh√¥ng c√≥ danh m·ª•c n√†o
                </div>
              )}
            </div>
            
            {/* S·ª¨A: Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ƒëang d√πng default */}
            {(!team?.categories || team.categories.length === 0) && (
              <p className="text-xs text-orange-600 mt-2">
                ƒêang hi·ªÉn th·ªã danh m·ª•c m·∫∑c ƒë·ªãnh. Team ch∆∞a c√≥ danh m·ª•c t√πy ch·ªânh.
              </p>
            )}
          </div>

          {/* Filter by Type */}
          <div>
            <Label className="text-sm font-medium text-gray-700 mb-2 block">Lo·∫°i giao d·ªãch</Label>
            <RadioGroup
              value={selectedType}
              onValueChange={(value: "all" | "income" | "expense") => setSelectedType(value)}
              className="flex gap-4"
            >
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="all" id="type-all" />
                <Label htmlFor="type-all">T·∫•t c·∫£</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="income" id="type-income" />
                <Label htmlFor="type-income">Thu</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="expense" id="type-expense" />
                <Label htmlFor="type-expense">Chi</Label>
              </div>
            </RadioGroup>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-2 pt-4">
            <Button
              variant="outline"
              className="flex-1 rounded-lg bg-gray-100 text-gray-700 hover:bg-gray-200"
              onClick={handleCancel}
            >
              H·ªßy
            </Button>
            <Button className="flex-1 rounded-lg bg-red-500 text-white hover:bg-red-600" onClick={handleApply}>
              √Åp d·ª•ng
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
