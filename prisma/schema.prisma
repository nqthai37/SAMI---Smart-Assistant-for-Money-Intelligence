generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int                @id(map: "users_pkey") @default(autoincrement())
  firstName        String             @db.VarChar(255)
  lastName         String             @db.VarChar(255)
  email            String             @unique(map: "users_email_key") @db.VarChar(255)
  passwordHash     String             @db.VarChar(255)
  gender           String?            @db.VarChar(50)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  change_requests  change_requests[]
  notifications    notifications[]
  team_invitations team_invitations[]
  team_members     team_members[]
  teams            teams[]
  transactions     transactions[]
}

model change_requests {
  id                    Int                   @id @default(autoincrement())
  requester_id          Int
  target_transaction_id Int
  type                  String                @db.VarChar(50)
  status                change_request_status @default(pending)
  reason                String
  created_at            DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?             @default(now()) @db.Timestamptz(6)
  User                  User                  @relation(fields: [requester_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions          transactions          @relation(fields: [target_transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  id                  Int       @id @default(autoincrement())
  user_id             Int
  team_id             Int?
  type                String    @db.VarChar(50)
  message             String
  is_read             Boolean?  @default(false)
  related_resource_id Int?
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  teams               teams?    @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User                User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model team_invitations {
  id            Int               @id @default(autoincrement())
  token         String            @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id       Int
  inviter_id    Int
  invitee_email String            @db.VarChar(255)
  status        invitation_status @default(pending)
  created_at    DateTime?         @default(now()) @db.Timestamptz(6)
  expires_at    DateTime?         @default(dbgenerated("(now() + '7 days'::interval)")) @db.Timestamptz(6)
  User          User              @relation(fields: [inviter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teams         teams             @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model team_members {
  team_id   Int
  user_id   Int
  role      String?   @default("member") @db.VarChar(50)
  joined_at DateTime? @default(now()) @db.Timestamptz(6)
  teams     teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([team_id, user_id])
}

model teams {
  id                       Int                @id @default(autoincrement())
  team_name                String             @db.VarChar(255)
  owner_id                 Int
  currency                 String             @default("USD") @db.VarChar(3)
  budget                   Decimal?           @default(0) @db.Decimal(12, 2)
  income_goal              Decimal?           @db.Decimal(12, 2)
  allow_member_view_report Boolean?           @default(false)
  categories               Json               @default("[]")
  created_at               DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?          @default(now()) @db.Timestamptz(6)
  notifications            notifications[]
  team_invitations         team_invitations[]
  team_members             team_members[]
  User                     User               @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions             transactions[]
}

model transactions {
  id               Int               @id @default(autoincrement())
  team_id          Int
  user_id          Int
  amount           Decimal           @db.Decimal(12, 2)
  type             transaction_type
  category_name    String?           @db.VarChar(255)
  category_icon    String?           @db.VarChar(10)
  description      String?
  transaction_date DateTime?         @default(now()) @db.Timestamptz(6)
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @default(now()) @db.Timestamptz(6)
  change_requests  change_requests[]
  teams            teams             @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User             User              @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

enum change_request_status {
  pending
  approved
  rejected
}

enum invitation_status {
  pending
  accepted
  rejected
  expired
}

enum transaction_type {
  income
  expense
}
