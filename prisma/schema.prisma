generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int               @id(map: "users_pkey") @default(autoincrement())
  firstName       String            @db.VarChar(255)
  lastName        String            @db.VarChar(255)
  email           String            @unique(map: "users_email_key") @db.VarChar(255)
  passwordHash    String            @db.VarChar(255)
  gender          String?           @db.VarChar(50)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  dateOfBirth     DateTime?         @db.Date
  phoneNumber     String?           @db.VarChar
  changeRequests  changeRequests[]
  notifications   notifications[]
  passwordResets  passwordResets[]
  teamInvitations teamInvitations[]
  teamMembers     teamMembers[]
  teams           teams[]
  transactions    transactions[]
}

model notifications {
  id                Int       @id @default(autoincrement())
  userId            Int
  teamId            Int?
  type              String    @db.VarChar(50)
  message           String
  isRead            Boolean?  @default(false)
  relatedResourceId Int?
  createdAt         DateTime? @default(now()) @db.Timestamptz(6)
  teams             teams?    @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_team_id_fkey")
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_user_id_fkey")
}

model teams {
  id                    Int               @id @default(autoincrement())
  teamName              String            @db.VarChar(255)
  ownerId               Int
  currency              String            @default("USD") @db.VarChar(3)
  budget                Decimal?          @default(0) @db.Decimal(12, 2)
  incomeGoal            Decimal?          @db.Decimal(12, 2)
  allowMemberViewReport Boolean?          @default(false)
  categories            Json              @default("[]")
  createdAt             DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime?         @default(now()) @db.Timestamptz(6)
  notifications         notifications[]
  teamInvitations       teamInvitations[]
  teamMembers           teamMembers[]
  User                  User              @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "teams_owner_id_fkey")
  transactions          transactions[]
}

model transactions {
  id              Int              @id @default(autoincrement())
  teamId          Int
  userId          Int
  amount          Decimal          @db.Decimal(12, 2)
  type            transaction_type
  categoryName    String?          @db.VarChar(255)
  categoryIcon    String?          @db.VarChar(10)
  description     String?
  transactionDate DateTime?        @default(now()) @db.Timestamptz(6)
  createdAt       DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?        @default(now()) @db.Timestamptz(6)
  changeRequests  changeRequests[]
  teams           teams            @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_team_id_fkey")
  User            User             @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "transactions_user_id_fkey")
}

model changeRequests {
  id                  Int                   @id(map: "change_requests_pkey") @default(autoincrement())
  requesterId         Int
  targetTransactionId Int
  type                String                @db.VarChar(50)
  status              change_request_status @default(pending)
  reason              String
  createdAt           DateTime?             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime?             @default(now()) @db.Timestamptz(6)
  User                User                  @relation(fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "change_requests_requester_id_fkey")
  transactions        transactions          @relation(fields: [targetTransactionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "change_requests_target_transaction_id_fkey")
}

model passwordResets {
  id        Int       @id(map: "password_resets_pkey") @default(autoincrement())
  userId    Int
  token     String    @unique(map: "password_resets_token_key") @default(dbgenerated("encode(gen_random_bytes(32), 'hex'::text)")) @db.VarChar(64)
  expiresAt DateTime  @default(dbgenerated("(now() + '01:00:00'::interval)")) @db.Timestamptz(6)
  used      Boolean   @default(false)
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "password_resets_user_id_fkey")
}

model teamInvitations {
  id           Int               @id(map: "team_invitations_pkey") @default(autoincrement())
  token        String            @unique(map: "team_invitations_token_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId       Int
  inviterId    Int
  inviteeEmail String            @db.VarChar(255)
  status       invitation_status @default(pending)
  createdAt    DateTime?         @default(now()) @db.Timestamptz(6)
  expiresAt    DateTime?         @default(dbgenerated("(now() + '7 days'::interval)")) @db.Timestamptz(6)
  User         User              @relation(fields: [inviterId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_invitations_inviter_id_fkey")
  teams        teams             @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_invitations_team_id_fkey")
}

model teamMembers {
  teamId   Int
  userId   Int
  role     String?   @default("member") @db.VarChar(50)
  joinedAt DateTime? @default(now()) @db.Timestamptz(6)
  teams    teams     @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_members_team_id_fkey")
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_members_user_id_fkey")

  @@id([teamId, userId])
}

enum change_request_status {
  pending
  approved
  rejected
}

enum invitation_status {
  pending
  accepted
  rejected
  expired
}

enum transaction_type {
  income
  expense
}
