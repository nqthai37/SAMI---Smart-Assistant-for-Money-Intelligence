// SAMI - Smart Assistant for Money Intelligence
// Prisma Schema Definition

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            Int           @id @default(autoincrement())
  firstName     String        @map("first_name") @db.VarChar(50)
  lastName      String        @map("last_name") @db.VarChar(50)
  email         String        @unique @db.VarChar(100)
  passwordHash  String        @map("password_hash") @db.VarChar(255)
  gender        String?       @db.VarChar(10)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  
  // Relations
  ownedTeams    Team[]        @relation("TeamOwner")
  transactions  Transaction[]
  
  @@map("users")
}

// Team model  
model Team {
  id           Int           @id @default(autoincrement())
  teamName     String        @map("team_name") @db.VarChar(100)
  ownerId      Int           @map("owner_id")
  currency     String        @default("USD") @db.VarChar(3)
  budget       Decimal       @default(0) @db.Decimal(15, 2)
  categories   Json          @default("[]")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  
  // Relations
  owner        User          @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@map("teams")
}

// Transaction model
model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  teamId          Int      @map("team_id")
  amount          Decimal  @db.Decimal(15, 2)
  description     String?  @db.Text
  category        String?  @db.VarChar(50)
  transactionType String   @map("transaction_type") @db.VarChar(20)
  transactionDate DateTime @default(now()) @map("transaction_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}
