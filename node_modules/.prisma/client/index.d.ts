
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model notifications
 * 
 */
export type notifications = $Result.DefaultSelection<Prisma.$notificationsPayload>
/**
 * Model teams
 * 
 */
export type teams = $Result.DefaultSelection<Prisma.$teamsPayload>
/**
 * Model transactions
 * 
 */
export type transactions = $Result.DefaultSelection<Prisma.$transactionsPayload>
/**
 * Model changeRequests
 * 
 */
export type changeRequests = $Result.DefaultSelection<Prisma.$changeRequestsPayload>
/**
 * Model passwordResets
 * 
 */
export type passwordResets = $Result.DefaultSelection<Prisma.$passwordResetsPayload>
/**
 * Model teamInvitations
 * 
 */
export type teamInvitations = $Result.DefaultSelection<Prisma.$teamInvitationsPayload>
/**
 * Model teamMembers
 * 
 */
export type teamMembers = $Result.DefaultSelection<Prisma.$teamMembersPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const change_request_status: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type change_request_status = (typeof change_request_status)[keyof typeof change_request_status]


export const invitation_status: {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected',
  expired: 'expired'
};

export type invitation_status = (typeof invitation_status)[keyof typeof invitation_status]


export const transaction_type: {
  income: 'income',
  expense: 'expense'
};

export type transaction_type = (typeof transaction_type)[keyof typeof transaction_type]

}

export type change_request_status = $Enums.change_request_status

export const change_request_status: typeof $Enums.change_request_status

export type invitation_status = $Enums.invitation_status

export const invitation_status: typeof $Enums.invitation_status

export type transaction_type = $Enums.transaction_type

export const transaction_type: typeof $Enums.transaction_type

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.notificationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teams`: Exposes CRUD operations for the **teams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.teams.findMany()
    * ```
    */
  get teams(): Prisma.teamsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.transactionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.changeRequests`: Exposes CRUD operations for the **changeRequests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChangeRequests
    * const changeRequests = await prisma.changeRequests.findMany()
    * ```
    */
  get changeRequests(): Prisma.changeRequestsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResets`: Exposes CRUD operations for the **passwordResets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordResets.findMany()
    * ```
    */
  get passwordResets(): Prisma.passwordResetsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamInvitations`: Exposes CRUD operations for the **teamInvitations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamInvitations
    * const teamInvitations = await prisma.teamInvitations.findMany()
    * ```
    */
  get teamInvitations(): Prisma.teamInvitationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMembers`: Exposes CRUD operations for the **teamMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMembers.findMany()
    * ```
    */
  get teamMembers(): Prisma.teamMembersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    notifications: 'notifications',
    teams: 'teams',
    transactions: 'transactions',
    changeRequests: 'changeRequests',
    passwordResets: 'passwordResets',
    teamInvitations: 'teamInvitations',
    teamMembers: 'teamMembers'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "notifications" | "teams" | "transactions" | "changeRequests" | "passwordResets" | "teamInvitations" | "teamMembers"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      notifications: {
        payload: Prisma.$notificationsPayload<ExtArgs>
        fields: Prisma.notificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.notificationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.notificationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          findFirst: {
            args: Prisma.notificationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.notificationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          findMany: {
            args: Prisma.notificationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>[]
          }
          create: {
            args: Prisma.notificationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          createMany: {
            args: Prisma.notificationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.notificationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>[]
          }
          delete: {
            args: Prisma.notificationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          update: {
            args: Prisma.notificationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          deleteMany: {
            args: Prisma.notificationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.notificationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.notificationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>[]
          }
          upsert: {
            args: Prisma.notificationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.notificationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.notificationsCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
      teams: {
        payload: Prisma.$teamsPayload<ExtArgs>
        fields: Prisma.teamsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.teamsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.teamsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          findFirst: {
            args: Prisma.teamsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.teamsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          findMany: {
            args: Prisma.teamsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>[]
          }
          create: {
            args: Prisma.teamsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          createMany: {
            args: Prisma.teamsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.teamsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>[]
          }
          delete: {
            args: Prisma.teamsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          update: {
            args: Prisma.teamsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          deleteMany: {
            args: Prisma.teamsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.teamsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.teamsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>[]
          }
          upsert: {
            args: Prisma.teamsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamsPayload>
          }
          aggregate: {
            args: Prisma.TeamsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeams>
          }
          groupBy: {
            args: Prisma.teamsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.teamsCountArgs<ExtArgs>
            result: $Utils.Optional<TeamsCountAggregateOutputType> | number
          }
        }
      }
      transactions: {
        payload: Prisma.$transactionsPayload<ExtArgs>
        fields: Prisma.transactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findFirst: {
            args: Prisma.transactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findMany: {
            args: Prisma.transactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          create: {
            args: Prisma.transactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          createMany: {
            args: Prisma.transactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transactionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          delete: {
            args: Prisma.transactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          update: {
            args: Prisma.transactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          deleteMany: {
            args: Prisma.transactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.transactionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          upsert: {
            args: Prisma.transactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.transactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.transactionsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
      changeRequests: {
        payload: Prisma.$changeRequestsPayload<ExtArgs>
        fields: Prisma.changeRequestsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.changeRequestsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.changeRequestsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>
          }
          findFirst: {
            args: Prisma.changeRequestsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.changeRequestsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>
          }
          findMany: {
            args: Prisma.changeRequestsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>[]
          }
          create: {
            args: Prisma.changeRequestsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>
          }
          createMany: {
            args: Prisma.changeRequestsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.changeRequestsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>[]
          }
          delete: {
            args: Prisma.changeRequestsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>
          }
          update: {
            args: Prisma.changeRequestsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>
          }
          deleteMany: {
            args: Prisma.changeRequestsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.changeRequestsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.changeRequestsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>[]
          }
          upsert: {
            args: Prisma.changeRequestsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$changeRequestsPayload>
          }
          aggregate: {
            args: Prisma.ChangeRequestsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChangeRequests>
          }
          groupBy: {
            args: Prisma.changeRequestsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChangeRequestsGroupByOutputType>[]
          }
          count: {
            args: Prisma.changeRequestsCountArgs<ExtArgs>
            result: $Utils.Optional<ChangeRequestsCountAggregateOutputType> | number
          }
        }
      }
      passwordResets: {
        payload: Prisma.$passwordResetsPayload<ExtArgs>
        fields: Prisma.passwordResetsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.passwordResetsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.passwordResetsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>
          }
          findFirst: {
            args: Prisma.passwordResetsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.passwordResetsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>
          }
          findMany: {
            args: Prisma.passwordResetsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>[]
          }
          create: {
            args: Prisma.passwordResetsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>
          }
          createMany: {
            args: Prisma.passwordResetsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.passwordResetsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>[]
          }
          delete: {
            args: Prisma.passwordResetsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>
          }
          update: {
            args: Prisma.passwordResetsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>
          }
          deleteMany: {
            args: Prisma.passwordResetsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.passwordResetsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.passwordResetsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>[]
          }
          upsert: {
            args: Prisma.passwordResetsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passwordResetsPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResets>
          }
          groupBy: {
            args: Prisma.passwordResetsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetsGroupByOutputType>[]
          }
          count: {
            args: Prisma.passwordResetsCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetsCountAggregateOutputType> | number
          }
        }
      }
      teamInvitations: {
        payload: Prisma.$teamInvitationsPayload<ExtArgs>
        fields: Prisma.teamInvitationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.teamInvitationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.teamInvitationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>
          }
          findFirst: {
            args: Prisma.teamInvitationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.teamInvitationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>
          }
          findMany: {
            args: Prisma.teamInvitationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>[]
          }
          create: {
            args: Prisma.teamInvitationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>
          }
          createMany: {
            args: Prisma.teamInvitationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.teamInvitationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>[]
          }
          delete: {
            args: Prisma.teamInvitationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>
          }
          update: {
            args: Prisma.teamInvitationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>
          }
          deleteMany: {
            args: Prisma.teamInvitationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.teamInvitationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.teamInvitationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>[]
          }
          upsert: {
            args: Prisma.teamInvitationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamInvitationsPayload>
          }
          aggregate: {
            args: Prisma.TeamInvitationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamInvitations>
          }
          groupBy: {
            args: Prisma.teamInvitationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamInvitationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.teamInvitationsCountArgs<ExtArgs>
            result: $Utils.Optional<TeamInvitationsCountAggregateOutputType> | number
          }
        }
      }
      teamMembers: {
        payload: Prisma.$teamMembersPayload<ExtArgs>
        fields: Prisma.teamMembersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.teamMembersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.teamMembersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>
          }
          findFirst: {
            args: Prisma.teamMembersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.teamMembersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>
          }
          findMany: {
            args: Prisma.teamMembersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>[]
          }
          create: {
            args: Prisma.teamMembersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>
          }
          createMany: {
            args: Prisma.teamMembersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.teamMembersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>[]
          }
          delete: {
            args: Prisma.teamMembersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>
          }
          update: {
            args: Prisma.teamMembersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>
          }
          deleteMany: {
            args: Prisma.teamMembersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.teamMembersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.teamMembersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>[]
          }
          upsert: {
            args: Prisma.teamMembersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamMembersPayload>
          }
          aggregate: {
            args: Prisma.TeamMembersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMembers>
          }
          groupBy: {
            args: Prisma.teamMembersGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMembersGroupByOutputType>[]
          }
          count: {
            args: Prisma.teamMembersCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMembersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    notifications?: notificationsOmit
    teams?: teamsOmit
    transactions?: transactionsOmit
    changeRequests?: changeRequestsOmit
    passwordResets?: passwordResetsOmit
    teamInvitations?: teamInvitationsOmit
    teamMembers?: teamMembersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    changeRequests: number
    notifications: number
    passwordResets: number
    teamInvitations: number
    teamMembers: number
    teams: number
    transactions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    changeRequests?: boolean | UserCountOutputTypeCountChangeRequestsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    passwordResets?: boolean | UserCountOutputTypeCountPasswordResetsArgs
    teamInvitations?: boolean | UserCountOutputTypeCountTeamInvitationsArgs
    teamMembers?: boolean | UserCountOutputTypeCountTeamMembersArgs
    teams?: boolean | UserCountOutputTypeCountTeamsArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChangeRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: changeRequestsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: passwordResetsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamInvitationsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamMembersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }


  /**
   * Count Type TeamsCountOutputType
   */

  export type TeamsCountOutputType = {
    notifications: number
    teamInvitations: number
    teamMembers: number
    transactions: number
  }

  export type TeamsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | TeamsCountOutputTypeCountNotificationsArgs
    teamInvitations?: boolean | TeamsCountOutputTypeCountTeamInvitationsArgs
    teamMembers?: boolean | TeamsCountOutputTypeCountTeamMembersArgs
    transactions?: boolean | TeamsCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamsCountOutputType
     */
    select?: TeamsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountTeamInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamInvitationsWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountTeamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamMembersWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }


  /**
   * Count Type TransactionsCountOutputType
   */

  export type TransactionsCountOutputType = {
    changeRequests: number
  }

  export type TransactionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    changeRequests?: boolean | TransactionsCountOutputTypeCountChangeRequestsArgs
  }

  // Custom InputTypes
  /**
   * TransactionsCountOutputType without action
   */
  export type TransactionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsCountOutputType
     */
    select?: TransactionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionsCountOutputType without action
   */
  export type TransactionsCountOutputTypeCountChangeRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: changeRequestsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    passwordHash: string | null
    gender: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    passwordHash: string | null
    gender: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    passwordHash: number
    gender: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    gender?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    gender?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    gender?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    gender?: boolean
    created_at?: boolean
    updated_at?: boolean
    changeRequests?: boolean | User$changeRequestsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    passwordResets?: boolean | User$passwordResetsArgs<ExtArgs>
    teamInvitations?: boolean | User$teamInvitationsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    gender?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    gender?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    gender?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "passwordHash" | "gender" | "created_at" | "updated_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    changeRequests?: boolean | User$changeRequestsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    passwordResets?: boolean | User$passwordResetsArgs<ExtArgs>
    teamInvitations?: boolean | User$teamInvitationsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      changeRequests: Prisma.$changeRequestsPayload<ExtArgs>[]
      notifications: Prisma.$notificationsPayload<ExtArgs>[]
      passwordResets: Prisma.$passwordResetsPayload<ExtArgs>[]
      teamInvitations: Prisma.$teamInvitationsPayload<ExtArgs>[]
      teamMembers: Prisma.$teamMembersPayload<ExtArgs>[]
      teams: Prisma.$teamsPayload<ExtArgs>[]
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      email: string
      passwordHash: string
      gender: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    changeRequests<T extends User$changeRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$changeRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    passwordResets<T extends User$passwordResetsArgs<ExtArgs> = {}>(args?: Subset<T, User$passwordResetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamInvitations<T extends User$teamInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$teamInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamMembers<T extends User$teamMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$teamMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends User$teamsArgs<ExtArgs> = {}>(args?: Subset<T, User$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.changeRequests
   */
  export type User$changeRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    where?: changeRequestsWhereInput
    orderBy?: changeRequestsOrderByWithRelationInput | changeRequestsOrderByWithRelationInput[]
    cursor?: changeRequestsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChangeRequestsScalarFieldEnum | ChangeRequestsScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * User.passwordResets
   */
  export type User$passwordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    where?: passwordResetsWhereInput
    orderBy?: passwordResetsOrderByWithRelationInput | passwordResetsOrderByWithRelationInput[]
    cursor?: passwordResetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetsScalarFieldEnum | PasswordResetsScalarFieldEnum[]
  }

  /**
   * User.teamInvitations
   */
  export type User$teamInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    where?: teamInvitationsWhereInput
    orderBy?: teamInvitationsOrderByWithRelationInput | teamInvitationsOrderByWithRelationInput[]
    cursor?: teamInvitationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamInvitationsScalarFieldEnum | TeamInvitationsScalarFieldEnum[]
  }

  /**
   * User.teamMembers
   */
  export type User$teamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    where?: teamMembersWhereInput
    orderBy?: teamMembersOrderByWithRelationInput | teamMembersOrderByWithRelationInput[]
    cursor?: teamMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * User.teams
   */
  export type User$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    where?: teamsWhereInput
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    cursor?: teamsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model notifications
   */

  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    teamId: number | null
    relatedResourceId: number | null
  }

  export type NotificationsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    teamId: number | null
    relatedResourceId: number | null
  }

  export type NotificationsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    teamId: number | null
    type: string | null
    message: string | null
    isRead: boolean | null
    relatedResourceId: number | null
    createdAt: Date | null
  }

  export type NotificationsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    teamId: number | null
    type: string | null
    message: string | null
    isRead: boolean | null
    relatedResourceId: number | null
    createdAt: Date | null
  }

  export type NotificationsCountAggregateOutputType = {
    id: number
    userId: number
    teamId: number
    type: number
    message: number
    isRead: number
    relatedResourceId: number
    createdAt: number
    _all: number
  }


  export type NotificationsAvgAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
    relatedResourceId?: true
  }

  export type NotificationsSumAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
    relatedResourceId?: true
  }

  export type NotificationsMinAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
    type?: true
    message?: true
    isRead?: true
    relatedResourceId?: true
    createdAt?: true
  }

  export type NotificationsMaxAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
    type?: true
    message?: true
    isRead?: true
    relatedResourceId?: true
    createdAt?: true
  }

  export type NotificationsCountAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
    type?: true
    message?: true
    isRead?: true
    relatedResourceId?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to aggregate.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type notificationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithAggregationInput | notificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: notificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _avg?: NotificationsAvgAggregateInputType
    _sum?: NotificationsSumAggregateInputType
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }

  export type NotificationsGroupByOutputType = {
    id: number
    userId: number
    teamId: number | null
    type: string
    message: string
    isRead: boolean | null
    relatedResourceId: number | null
    createdAt: Date | null
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends notificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type notificationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    teamId?: boolean
    type?: boolean
    message?: boolean
    isRead?: boolean
    relatedResourceId?: boolean
    createdAt?: boolean
    teams?: boolean | notifications$teamsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type notificationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    teamId?: boolean
    type?: boolean
    message?: boolean
    isRead?: boolean
    relatedResourceId?: boolean
    createdAt?: boolean
    teams?: boolean | notifications$teamsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type notificationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    teamId?: boolean
    type?: boolean
    message?: boolean
    isRead?: boolean
    relatedResourceId?: boolean
    createdAt?: boolean
    teams?: boolean | notifications$teamsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type notificationsSelectScalar = {
    id?: boolean
    userId?: boolean
    teamId?: boolean
    type?: boolean
    message?: boolean
    isRead?: boolean
    relatedResourceId?: boolean
    createdAt?: boolean
  }

  export type notificationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "teamId" | "type" | "message" | "isRead" | "relatedResourceId" | "createdAt", ExtArgs["result"]["notifications"]>
  export type notificationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | notifications$teamsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type notificationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | notifications$teamsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type notificationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | notifications$teamsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $notificationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "notifications"
    objects: {
      teams: Prisma.$teamsPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      teamId: number | null
      type: string
      message: string
      isRead: boolean | null
      relatedResourceId: number | null
      createdAt: Date | null
    }, ExtArgs["result"]["notifications"]>
    composites: {}
  }

  type notificationsGetPayload<S extends boolean | null | undefined | notificationsDefaultArgs> = $Result.GetResult<Prisma.$notificationsPayload, S>

  type notificationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<notificationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface notificationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notifications'], meta: { name: 'notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {notificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends notificationsFindUniqueArgs>(args: SelectSubset<T, notificationsFindUniqueArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notifications that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {notificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends notificationsFindUniqueOrThrowArgs>(args: SelectSubset<T, notificationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends notificationsFindFirstArgs>(args?: SelectSubset<T, notificationsFindFirstArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends notificationsFindFirstOrThrowArgs>(args?: SelectSubset<T, notificationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends notificationsFindManyArgs>(args?: SelectSubset<T, notificationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notifications.
     * @param {notificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
     */
    create<T extends notificationsCreateArgs>(args: SelectSubset<T, notificationsCreateArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {notificationsCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notifications = await prisma.notifications.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends notificationsCreateManyArgs>(args?: SelectSubset<T, notificationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {notificationsCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notifications = await prisma.notifications.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationsWithIdOnly = await prisma.notifications.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends notificationsCreateManyAndReturnArgs>(args?: SelectSubset<T, notificationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notifications.
     * @param {notificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
     */
    delete<T extends notificationsDeleteArgs>(args: SelectSubset<T, notificationsDeleteArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notifications.
     * @param {notificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends notificationsUpdateArgs>(args: SelectSubset<T, notificationsUpdateArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {notificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends notificationsDeleteManyArgs>(args?: SelectSubset<T, notificationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends notificationsUpdateManyArgs>(args: SelectSubset<T, notificationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {notificationsUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationsWithIdOnly = await prisma.notifications.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends notificationsUpdateManyAndReturnArgs>(args: SelectSubset<T, notificationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notifications.
     * @param {notificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
     */
    upsert<T extends notificationsUpsertArgs>(args: SelectSubset<T, notificationsUpsertArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationsCountArgs>(
      args?: Subset<T, notificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends notificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: notificationsGroupByArgs['orderBy'] }
        : { orderBy?: notificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, notificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the notifications model
   */
  readonly fields: notificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__notificationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teams<T extends notifications$teamsArgs<ExtArgs> = {}>(args?: Subset<T, notifications$teamsArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the notifications model
   */
  interface notificationsFieldRefs {
    readonly id: FieldRef<"notifications", 'Int'>
    readonly userId: FieldRef<"notifications", 'Int'>
    readonly teamId: FieldRef<"notifications", 'Int'>
    readonly type: FieldRef<"notifications", 'String'>
    readonly message: FieldRef<"notifications", 'String'>
    readonly isRead: FieldRef<"notifications", 'Boolean'>
    readonly relatedResourceId: FieldRef<"notifications", 'Int'>
    readonly createdAt: FieldRef<"notifications", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * notifications findUnique
   */
  export type notificationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications findUniqueOrThrow
   */
  export type notificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications findFirst
   */
  export type notificationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * notifications findFirstOrThrow
   */
  export type notificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * notifications findMany
   */
  export type notificationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * notifications create
   */
  export type notificationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a notifications.
     */
    data: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
  }

  /**
   * notifications createMany
   */
  export type notificationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many notifications.
     */
    data: notificationsCreateManyInput | notificationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * notifications createManyAndReturn
   */
  export type notificationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * The data used to create many notifications.
     */
    data: notificationsCreateManyInput | notificationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * notifications update
   */
  export type notificationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a notifications.
     */
    data: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
    /**
     * Choose, which notifications to update.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications updateMany
   */
  export type notificationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationsWhereInput
    /**
     * Limit how many notifications to update.
     */
    limit?: number
  }

  /**
   * notifications updateManyAndReturn
   */
  export type notificationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationsWhereInput
    /**
     * Limit how many notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * notifications upsert
   */
  export type notificationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the notifications to update in case it exists.
     */
    where: notificationsWhereUniqueInput
    /**
     * In case the notifications found by the `where` argument doesn't exist, create a new notifications with this data.
     */
    create: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
    /**
     * In case the notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
  }

  /**
   * notifications delete
   */
  export type notificationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter which notifications to delete.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications deleteMany
   */
  export type notificationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationsWhereInput
    /**
     * Limit how many notifications to delete.
     */
    limit?: number
  }

  /**
   * notifications.teams
   */
  export type notifications$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    where?: teamsWhereInput
  }

  /**
   * notifications without action
   */
  export type notificationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
  }


  /**
   * Model teams
   */

  export type AggregateTeams = {
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  export type TeamsAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    budget: Decimal | null
    incomeGoal: Decimal | null
  }

  export type TeamsSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    budget: Decimal | null
    incomeGoal: Decimal | null
  }

  export type TeamsMinAggregateOutputType = {
    id: number | null
    teamName: string | null
    ownerId: number | null
    currency: string | null
    budget: Decimal | null
    incomeGoal: Decimal | null
    allowMemberViewReport: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamsMaxAggregateOutputType = {
    id: number | null
    teamName: string | null
    ownerId: number | null
    currency: string | null
    budget: Decimal | null
    incomeGoal: Decimal | null
    allowMemberViewReport: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamsCountAggregateOutputType = {
    id: number
    teamName: number
    ownerId: number
    currency: number
    budget: number
    incomeGoal: number
    allowMemberViewReport: number
    categories: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamsAvgAggregateInputType = {
    id?: true
    ownerId?: true
    budget?: true
    incomeGoal?: true
  }

  export type TeamsSumAggregateInputType = {
    id?: true
    ownerId?: true
    budget?: true
    incomeGoal?: true
  }

  export type TeamsMinAggregateInputType = {
    id?: true
    teamName?: true
    ownerId?: true
    currency?: true
    budget?: true
    incomeGoal?: true
    allowMemberViewReport?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamsMaxAggregateInputType = {
    id?: true
    teamName?: true
    ownerId?: true
    currency?: true
    budget?: true
    incomeGoal?: true
    allowMemberViewReport?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamsCountAggregateInputType = {
    id?: true
    teamName?: true
    ownerId?: true
    currency?: true
    budget?: true
    incomeGoal?: true
    allowMemberViewReport?: true
    categories?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teams to aggregate.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teams
    **/
    _count?: true | TeamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamsMaxAggregateInputType
  }

  export type GetTeamsAggregateType<T extends TeamsAggregateArgs> = {
        [P in keyof T & keyof AggregateTeams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeams[P]>
      : GetScalarType<T[P], AggregateTeams[P]>
  }




  export type teamsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamsWhereInput
    orderBy?: teamsOrderByWithAggregationInput | teamsOrderByWithAggregationInput[]
    by: TeamsScalarFieldEnum[] | TeamsScalarFieldEnum
    having?: teamsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamsCountAggregateInputType | true
    _avg?: TeamsAvgAggregateInputType
    _sum?: TeamsSumAggregateInputType
    _min?: TeamsMinAggregateInputType
    _max?: TeamsMaxAggregateInputType
  }

  export type TeamsGroupByOutputType = {
    id: number
    teamName: string
    ownerId: number
    currency: string
    budget: Decimal | null
    incomeGoal: Decimal | null
    allowMemberViewReport: boolean | null
    categories: JsonValue
    createdAt: Date | null
    updatedAt: Date | null
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  type GetTeamsGroupByPayload<T extends teamsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamsGroupByOutputType[P]>
            : GetScalarType<T[P], TeamsGroupByOutputType[P]>
        }
      >
    >


  export type teamsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamName?: boolean
    ownerId?: boolean
    currency?: boolean
    budget?: boolean
    incomeGoal?: boolean
    allowMemberViewReport?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notifications?: boolean | teams$notificationsArgs<ExtArgs>
    teamInvitations?: boolean | teams$teamInvitationsArgs<ExtArgs>
    teamMembers?: boolean | teams$teamMembersArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | teams$transactionsArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>

  export type teamsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamName?: boolean
    ownerId?: boolean
    currency?: boolean
    budget?: boolean
    incomeGoal?: boolean
    allowMemberViewReport?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>

  export type teamsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamName?: boolean
    ownerId?: boolean
    currency?: boolean
    budget?: boolean
    incomeGoal?: boolean
    allowMemberViewReport?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>

  export type teamsSelectScalar = {
    id?: boolean
    teamName?: boolean
    ownerId?: boolean
    currency?: boolean
    budget?: boolean
    incomeGoal?: boolean
    allowMemberViewReport?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type teamsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamName" | "ownerId" | "currency" | "budget" | "incomeGoal" | "allowMemberViewReport" | "categories" | "createdAt" | "updatedAt", ExtArgs["result"]["teams"]>
  export type teamsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | teams$notificationsArgs<ExtArgs>
    teamInvitations?: boolean | teams$teamInvitationsArgs<ExtArgs>
    teamMembers?: boolean | teams$teamMembersArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | teams$transactionsArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type teamsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type teamsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $teamsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "teams"
    objects: {
      notifications: Prisma.$notificationsPayload<ExtArgs>[]
      teamInvitations: Prisma.$teamInvitationsPayload<ExtArgs>[]
      teamMembers: Prisma.$teamMembersPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teamName: string
      ownerId: number
      currency: string
      budget: Prisma.Decimal | null
      incomeGoal: Prisma.Decimal | null
      allowMemberViewReport: boolean | null
      categories: Prisma.JsonValue
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["teams"]>
    composites: {}
  }

  type teamsGetPayload<S extends boolean | null | undefined | teamsDefaultArgs> = $Result.GetResult<Prisma.$teamsPayload, S>

  type teamsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<teamsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamsCountAggregateInputType | true
    }

  export interface teamsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['teams'], meta: { name: 'teams' } }
    /**
     * Find zero or one Teams that matches the filter.
     * @param {teamsFindUniqueArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends teamsFindUniqueArgs>(args: SelectSubset<T, teamsFindUniqueArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teams that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {teamsFindUniqueOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends teamsFindUniqueOrThrowArgs>(args: SelectSubset<T, teamsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsFindFirstArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends teamsFindFirstArgs>(args?: SelectSubset<T, teamsFindFirstArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsFindFirstOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends teamsFindFirstOrThrowArgs>(args?: SelectSubset<T, teamsFindFirstOrThrowArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.teams.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.teams.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamsWithIdOnly = await prisma.teams.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends teamsFindManyArgs>(args?: SelectSubset<T, teamsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teams.
     * @param {teamsCreateArgs} args - Arguments to create a Teams.
     * @example
     * // Create one Teams
     * const Teams = await prisma.teams.create({
     *   data: {
     *     // ... data to create a Teams
     *   }
     * })
     * 
     */
    create<T extends teamsCreateArgs>(args: SelectSubset<T, teamsCreateArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {teamsCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends teamsCreateManyArgs>(args?: SelectSubset<T, teamsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {teamsCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamsWithIdOnly = await prisma.teams.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends teamsCreateManyAndReturnArgs>(args?: SelectSubset<T, teamsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teams.
     * @param {teamsDeleteArgs} args - Arguments to delete one Teams.
     * @example
     * // Delete one Teams
     * const Teams = await prisma.teams.delete({
     *   where: {
     *     // ... filter to delete one Teams
     *   }
     * })
     * 
     */
    delete<T extends teamsDeleteArgs>(args: SelectSubset<T, teamsDeleteArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teams.
     * @param {teamsUpdateArgs} args - Arguments to update one Teams.
     * @example
     * // Update one Teams
     * const teams = await prisma.teams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends teamsUpdateArgs>(args: SelectSubset<T, teamsUpdateArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {teamsDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.teams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends teamsDeleteManyArgs>(args?: SelectSubset<T, teamsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const teams = await prisma.teams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends teamsUpdateManyArgs>(args: SelectSubset<T, teamsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {teamsUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const teams = await prisma.teams.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamsWithIdOnly = await prisma.teams.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends teamsUpdateManyAndReturnArgs>(args: SelectSubset<T, teamsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teams.
     * @param {teamsUpsertArgs} args - Arguments to update or create a Teams.
     * @example
     * // Update or create a Teams
     * const teams = await prisma.teams.upsert({
     *   create: {
     *     // ... data to create a Teams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teams we want to update
     *   }
     * })
     */
    upsert<T extends teamsUpsertArgs>(args: SelectSubset<T, teamsUpsertArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.teams.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends teamsCountArgs>(
      args?: Subset<T, teamsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamsAggregateArgs>(args: Subset<T, TeamsAggregateArgs>): Prisma.PrismaPromise<GetTeamsAggregateType<T>>

    /**
     * Group by Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends teamsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: teamsGroupByArgs['orderBy'] }
        : { orderBy?: teamsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, teamsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the teams model
   */
  readonly fields: teamsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for teams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__teamsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notifications<T extends teams$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, teams$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamInvitations<T extends teams$teamInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, teams$teamInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamMembers<T extends teams$teamMembersArgs<ExtArgs> = {}>(args?: Subset<T, teams$teamMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends teams$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, teams$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the teams model
   */
  interface teamsFieldRefs {
    readonly id: FieldRef<"teams", 'Int'>
    readonly teamName: FieldRef<"teams", 'String'>
    readonly ownerId: FieldRef<"teams", 'Int'>
    readonly currency: FieldRef<"teams", 'String'>
    readonly budget: FieldRef<"teams", 'Decimal'>
    readonly incomeGoal: FieldRef<"teams", 'Decimal'>
    readonly allowMemberViewReport: FieldRef<"teams", 'Boolean'>
    readonly categories: FieldRef<"teams", 'Json'>
    readonly createdAt: FieldRef<"teams", 'DateTime'>
    readonly updatedAt: FieldRef<"teams", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * teams findUnique
   */
  export type teamsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams findUniqueOrThrow
   */
  export type teamsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams findFirst
   */
  export type teamsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teams.
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * teams findFirstOrThrow
   */
  export type teamsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teams.
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * teams findMany
   */
  export type teamsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where?: teamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamsOrderByWithRelationInput | teamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teams.
     */
    cursor?: teamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * teams create
   */
  export type teamsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * The data needed to create a teams.
     */
    data: XOR<teamsCreateInput, teamsUncheckedCreateInput>
  }

  /**
   * teams createMany
   */
  export type teamsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many teams.
     */
    data: teamsCreateManyInput | teamsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * teams createManyAndReturn
   */
  export type teamsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * The data used to create many teams.
     */
    data: teamsCreateManyInput | teamsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * teams update
   */
  export type teamsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * The data needed to update a teams.
     */
    data: XOR<teamsUpdateInput, teamsUncheckedUpdateInput>
    /**
     * Choose, which teams to update.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams updateMany
   */
  export type teamsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update teams.
     */
    data: XOR<teamsUpdateManyMutationInput, teamsUncheckedUpdateManyInput>
    /**
     * Filter which teams to update
     */
    where?: teamsWhereInput
    /**
     * Limit how many teams to update.
     */
    limit?: number
  }

  /**
   * teams updateManyAndReturn
   */
  export type teamsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * The data used to update teams.
     */
    data: XOR<teamsUpdateManyMutationInput, teamsUncheckedUpdateManyInput>
    /**
     * Filter which teams to update
     */
    where?: teamsWhereInput
    /**
     * Limit how many teams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * teams upsert
   */
  export type teamsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * The filter to search for the teams to update in case it exists.
     */
    where: teamsWhereUniqueInput
    /**
     * In case the teams found by the `where` argument doesn't exist, create a new teams with this data.
     */
    create: XOR<teamsCreateInput, teamsUncheckedCreateInput>
    /**
     * In case the teams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teamsUpdateInput, teamsUncheckedUpdateInput>
  }

  /**
   * teams delete
   */
  export type teamsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
    /**
     * Filter which teams to delete.
     */
    where: teamsWhereUniqueInput
  }

  /**
   * teams deleteMany
   */
  export type teamsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teams to delete
     */
    where?: teamsWhereInput
    /**
     * Limit how many teams to delete.
     */
    limit?: number
  }

  /**
   * teams.notifications
   */
  export type teams$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notifications
     */
    omit?: notificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * teams.teamInvitations
   */
  export type teams$teamInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    where?: teamInvitationsWhereInput
    orderBy?: teamInvitationsOrderByWithRelationInput | teamInvitationsOrderByWithRelationInput[]
    cursor?: teamInvitationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamInvitationsScalarFieldEnum | TeamInvitationsScalarFieldEnum[]
  }

  /**
   * teams.teamMembers
   */
  export type teams$teamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    where?: teamMembersWhereInput
    orderBy?: teamMembersOrderByWithRelationInput | teamMembersOrderByWithRelationInput[]
    cursor?: teamMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * teams.transactions
   */
  export type teams$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * teams without action
   */
  export type teamsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teams
     */
    select?: teamsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teams
     */
    omit?: teamsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamsInclude<ExtArgs> | null
  }


  /**
   * Model transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
    userId: number | null
    amount: Decimal | null
  }

  export type TransactionsSumAggregateOutputType = {
    id: number | null
    teamId: number | null
    userId: number | null
    amount: Decimal | null
  }

  export type TransactionsMinAggregateOutputType = {
    id: number | null
    teamId: number | null
    userId: number | null
    amount: Decimal | null
    type: $Enums.transaction_type | null
    categoryName: string | null
    categoryIcon: string | null
    description: string | null
    transactionDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionsMaxAggregateOutputType = {
    id: number | null
    teamId: number | null
    userId: number | null
    amount: Decimal | null
    type: $Enums.transaction_type | null
    categoryName: string | null
    categoryIcon: string | null
    description: string | null
    transactionDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionsCountAggregateOutputType = {
    id: number
    teamId: number
    userId: number
    amount: number
    type: number
    categoryName: number
    categoryIcon: number
    description: number
    transactionDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    amount?: true
  }

  export type TransactionsSumAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    amount?: true
  }

  export type TransactionsMinAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    amount?: true
    type?: true
    categoryName?: true
    categoryIcon?: true
    description?: true
    transactionDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionsMaxAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    amount?: true
    type?: true
    categoryName?: true
    categoryIcon?: true
    description?: true
    transactionDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionsCountAggregateInputType = {
    id?: true
    teamId?: true
    userId?: true
    amount?: true
    type?: true
    categoryName?: true
    categoryIcon?: true
    description?: true
    transactionDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to aggregate.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type transactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithAggregationInput | transactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    id: number
    teamId: number
    userId: number
    amount: Decimal
    type: $Enums.transaction_type
    categoryName: string | null
    categoryIcon: string | null
    description: string | null
    transactionDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends transactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type transactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    categoryName?: boolean
    categoryIcon?: boolean
    description?: boolean
    transactionDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    changeRequests?: boolean | transactions$changeRequestsArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TransactionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    categoryName?: boolean
    categoryIcon?: boolean
    description?: boolean
    transactionDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    categoryName?: boolean
    categoryIcon?: boolean
    description?: boolean
    transactionDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectScalar = {
    id?: boolean
    teamId?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    categoryName?: boolean
    categoryIcon?: boolean
    description?: boolean
    transactionDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type transactionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "userId" | "amount" | "type" | "categoryName" | "categoryIcon" | "description" | "transactionDate" | "createdAt" | "updatedAt", ExtArgs["result"]["transactions"]>
  export type transactionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    changeRequests?: boolean | transactions$changeRequestsArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TransactionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type transactionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type transactionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $transactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transactions"
    objects: {
      changeRequests: Prisma.$changeRequestsPayload<ExtArgs>[]
      teams: Prisma.$teamsPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teamId: number
      userId: number
      amount: Prisma.Decimal
      type: $Enums.transaction_type
      categoryName: string | null
      categoryIcon: string | null
      description: string | null
      transactionDate: Date | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }

  type transactionsGetPayload<S extends boolean | null | undefined | transactionsDefaultArgs> = $Result.GetResult<Prisma.$transactionsPayload, S>

  type transactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<transactionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface transactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transactions'], meta: { name: 'transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {transactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transactionsFindUniqueArgs>(args: SelectSubset<T, transactionsFindUniqueArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transactions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {transactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, transactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transactionsFindFirstArgs>(args?: SelectSubset<T, transactionsFindFirstArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, transactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transactionsFindManyArgs>(args?: SelectSubset<T, transactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transactions.
     * @param {transactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
     */
    create<T extends transactionsCreateArgs>(args: SelectSubset<T, transactionsCreateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {transactionsCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transactionsCreateManyArgs>(args?: SelectSubset<T, transactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {transactionsCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transactionsCreateManyAndReturnArgs>(args?: SelectSubset<T, transactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transactions.
     * @param {transactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
     */
    delete<T extends transactionsDeleteArgs>(args: SelectSubset<T, transactionsDeleteArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transactions.
     * @param {transactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transactionsUpdateArgs>(args: SelectSubset<T, transactionsUpdateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {transactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transactionsDeleteManyArgs>(args?: SelectSubset<T, transactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transactionsUpdateManyArgs>(args: SelectSubset<T, transactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {transactionsUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends transactionsUpdateManyAndReturnArgs>(args: SelectSubset<T, transactionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transactions.
     * @param {transactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
     */
    upsert<T extends transactionsUpsertArgs>(args: SelectSubset<T, transactionsUpsertArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends transactionsCountArgs>(
      args?: Subset<T, transactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transactionsGroupByArgs['orderBy'] }
        : { orderBy?: transactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transactions model
   */
  readonly fields: transactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    changeRequests<T extends transactions$changeRequestsArgs<ExtArgs> = {}>(args?: Subset<T, transactions$changeRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends teamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, teamsDefaultArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transactions model
   */
  interface transactionsFieldRefs {
    readonly id: FieldRef<"transactions", 'Int'>
    readonly teamId: FieldRef<"transactions", 'Int'>
    readonly userId: FieldRef<"transactions", 'Int'>
    readonly amount: FieldRef<"transactions", 'Decimal'>
    readonly type: FieldRef<"transactions", 'transaction_type'>
    readonly categoryName: FieldRef<"transactions", 'String'>
    readonly categoryIcon: FieldRef<"transactions", 'String'>
    readonly description: FieldRef<"transactions", 'String'>
    readonly transactionDate: FieldRef<"transactions", 'DateTime'>
    readonly createdAt: FieldRef<"transactions", 'DateTime'>
    readonly updatedAt: FieldRef<"transactions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * transactions findUnique
   */
  export type transactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findUniqueOrThrow
   */
  export type transactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findFirst
   */
  export type transactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findFirstOrThrow
   */
  export type transactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findMany
   */
  export type transactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions create
   */
  export type transactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to create a transactions.
     */
    data: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
  }

  /**
   * transactions createMany
   */
  export type transactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions createManyAndReturn
   */
  export type transactionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions update
   */
  export type transactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to update a transactions.
     */
    data: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
    /**
     * Choose, which transactions to update.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions updateMany
   */
  export type transactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
    /**
     * Limit how many transactions to update.
     */
    limit?: number
  }

  /**
   * transactions updateManyAndReturn
   */
  export type transactionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
    /**
     * Limit how many transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions upsert
   */
  export type transactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The filter to search for the transactions to update in case it exists.
     */
    where: transactionsWhereUniqueInput
    /**
     * In case the transactions found by the `where` argument doesn't exist, create a new transactions with this data.
     */
    create: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
    /**
     * In case the transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
  }

  /**
   * transactions delete
   */
  export type transactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter which transactions to delete.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions deleteMany
   */
  export type transactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to delete
     */
    where?: transactionsWhereInput
    /**
     * Limit how many transactions to delete.
     */
    limit?: number
  }

  /**
   * transactions.changeRequests
   */
  export type transactions$changeRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    where?: changeRequestsWhereInput
    orderBy?: changeRequestsOrderByWithRelationInput | changeRequestsOrderByWithRelationInput[]
    cursor?: changeRequestsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChangeRequestsScalarFieldEnum | ChangeRequestsScalarFieldEnum[]
  }

  /**
   * transactions without action
   */
  export type transactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
  }


  /**
   * Model changeRequests
   */

  export type AggregateChangeRequests = {
    _count: ChangeRequestsCountAggregateOutputType | null
    _avg: ChangeRequestsAvgAggregateOutputType | null
    _sum: ChangeRequestsSumAggregateOutputType | null
    _min: ChangeRequestsMinAggregateOutputType | null
    _max: ChangeRequestsMaxAggregateOutputType | null
  }

  export type ChangeRequestsAvgAggregateOutputType = {
    id: number | null
    requesterId: number | null
    targetTransactionId: number | null
  }

  export type ChangeRequestsSumAggregateOutputType = {
    id: number | null
    requesterId: number | null
    targetTransactionId: number | null
  }

  export type ChangeRequestsMinAggregateOutputType = {
    id: number | null
    requesterId: number | null
    targetTransactionId: number | null
    type: string | null
    status: $Enums.change_request_status | null
    reason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChangeRequestsMaxAggregateOutputType = {
    id: number | null
    requesterId: number | null
    targetTransactionId: number | null
    type: string | null
    status: $Enums.change_request_status | null
    reason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChangeRequestsCountAggregateOutputType = {
    id: number
    requesterId: number
    targetTransactionId: number
    type: number
    status: number
    reason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChangeRequestsAvgAggregateInputType = {
    id?: true
    requesterId?: true
    targetTransactionId?: true
  }

  export type ChangeRequestsSumAggregateInputType = {
    id?: true
    requesterId?: true
    targetTransactionId?: true
  }

  export type ChangeRequestsMinAggregateInputType = {
    id?: true
    requesterId?: true
    targetTransactionId?: true
    type?: true
    status?: true
    reason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChangeRequestsMaxAggregateInputType = {
    id?: true
    requesterId?: true
    targetTransactionId?: true
    type?: true
    status?: true
    reason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChangeRequestsCountAggregateInputType = {
    id?: true
    requesterId?: true
    targetTransactionId?: true
    type?: true
    status?: true
    reason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChangeRequestsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which changeRequests to aggregate.
     */
    where?: changeRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of changeRequests to fetch.
     */
    orderBy?: changeRequestsOrderByWithRelationInput | changeRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: changeRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` changeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` changeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned changeRequests
    **/
    _count?: true | ChangeRequestsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChangeRequestsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChangeRequestsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChangeRequestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChangeRequestsMaxAggregateInputType
  }

  export type GetChangeRequestsAggregateType<T extends ChangeRequestsAggregateArgs> = {
        [P in keyof T & keyof AggregateChangeRequests]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChangeRequests[P]>
      : GetScalarType<T[P], AggregateChangeRequests[P]>
  }




  export type changeRequestsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: changeRequestsWhereInput
    orderBy?: changeRequestsOrderByWithAggregationInput | changeRequestsOrderByWithAggregationInput[]
    by: ChangeRequestsScalarFieldEnum[] | ChangeRequestsScalarFieldEnum
    having?: changeRequestsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChangeRequestsCountAggregateInputType | true
    _avg?: ChangeRequestsAvgAggregateInputType
    _sum?: ChangeRequestsSumAggregateInputType
    _min?: ChangeRequestsMinAggregateInputType
    _max?: ChangeRequestsMaxAggregateInputType
  }

  export type ChangeRequestsGroupByOutputType = {
    id: number
    requesterId: number
    targetTransactionId: number
    type: string
    status: $Enums.change_request_status
    reason: string
    createdAt: Date | null
    updatedAt: Date | null
    _count: ChangeRequestsCountAggregateOutputType | null
    _avg: ChangeRequestsAvgAggregateOutputType | null
    _sum: ChangeRequestsSumAggregateOutputType | null
    _min: ChangeRequestsMinAggregateOutputType | null
    _max: ChangeRequestsMaxAggregateOutputType | null
  }

  type GetChangeRequestsGroupByPayload<T extends changeRequestsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChangeRequestsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChangeRequestsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChangeRequestsGroupByOutputType[P]>
            : GetScalarType<T[P], ChangeRequestsGroupByOutputType[P]>
        }
      >
    >


  export type changeRequestsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    targetTransactionId?: boolean
    type?: boolean
    status?: boolean
    reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | transactionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["changeRequests"]>

  export type changeRequestsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    targetTransactionId?: boolean
    type?: boolean
    status?: boolean
    reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | transactionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["changeRequests"]>

  export type changeRequestsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    targetTransactionId?: boolean
    type?: boolean
    status?: boolean
    reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | transactionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["changeRequests"]>

  export type changeRequestsSelectScalar = {
    id?: boolean
    requesterId?: boolean
    targetTransactionId?: boolean
    type?: boolean
    status?: boolean
    reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type changeRequestsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requesterId" | "targetTransactionId" | "type" | "status" | "reason" | "createdAt" | "updatedAt", ExtArgs["result"]["changeRequests"]>
  export type changeRequestsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | transactionsDefaultArgs<ExtArgs>
  }
  export type changeRequestsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | transactionsDefaultArgs<ExtArgs>
  }
  export type changeRequestsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | transactionsDefaultArgs<ExtArgs>
  }

  export type $changeRequestsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "changeRequests"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      transactions: Prisma.$transactionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requesterId: number
      targetTransactionId: number
      type: string
      status: $Enums.change_request_status
      reason: string
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["changeRequests"]>
    composites: {}
  }

  type changeRequestsGetPayload<S extends boolean | null | undefined | changeRequestsDefaultArgs> = $Result.GetResult<Prisma.$changeRequestsPayload, S>

  type changeRequestsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<changeRequestsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChangeRequestsCountAggregateInputType | true
    }

  export interface changeRequestsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['changeRequests'], meta: { name: 'changeRequests' } }
    /**
     * Find zero or one ChangeRequests that matches the filter.
     * @param {changeRequestsFindUniqueArgs} args - Arguments to find a ChangeRequests
     * @example
     * // Get one ChangeRequests
     * const changeRequests = await prisma.changeRequests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends changeRequestsFindUniqueArgs>(args: SelectSubset<T, changeRequestsFindUniqueArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChangeRequests that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {changeRequestsFindUniqueOrThrowArgs} args - Arguments to find a ChangeRequests
     * @example
     * // Get one ChangeRequests
     * const changeRequests = await prisma.changeRequests.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends changeRequestsFindUniqueOrThrowArgs>(args: SelectSubset<T, changeRequestsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChangeRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {changeRequestsFindFirstArgs} args - Arguments to find a ChangeRequests
     * @example
     * // Get one ChangeRequests
     * const changeRequests = await prisma.changeRequests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends changeRequestsFindFirstArgs>(args?: SelectSubset<T, changeRequestsFindFirstArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChangeRequests that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {changeRequestsFindFirstOrThrowArgs} args - Arguments to find a ChangeRequests
     * @example
     * // Get one ChangeRequests
     * const changeRequests = await prisma.changeRequests.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends changeRequestsFindFirstOrThrowArgs>(args?: SelectSubset<T, changeRequestsFindFirstOrThrowArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChangeRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {changeRequestsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChangeRequests
     * const changeRequests = await prisma.changeRequests.findMany()
     * 
     * // Get first 10 ChangeRequests
     * const changeRequests = await prisma.changeRequests.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const changeRequestsWithIdOnly = await prisma.changeRequests.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends changeRequestsFindManyArgs>(args?: SelectSubset<T, changeRequestsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChangeRequests.
     * @param {changeRequestsCreateArgs} args - Arguments to create a ChangeRequests.
     * @example
     * // Create one ChangeRequests
     * const ChangeRequests = await prisma.changeRequests.create({
     *   data: {
     *     // ... data to create a ChangeRequests
     *   }
     * })
     * 
     */
    create<T extends changeRequestsCreateArgs>(args: SelectSubset<T, changeRequestsCreateArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChangeRequests.
     * @param {changeRequestsCreateManyArgs} args - Arguments to create many ChangeRequests.
     * @example
     * // Create many ChangeRequests
     * const changeRequests = await prisma.changeRequests.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends changeRequestsCreateManyArgs>(args?: SelectSubset<T, changeRequestsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChangeRequests and returns the data saved in the database.
     * @param {changeRequestsCreateManyAndReturnArgs} args - Arguments to create many ChangeRequests.
     * @example
     * // Create many ChangeRequests
     * const changeRequests = await prisma.changeRequests.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChangeRequests and only return the `id`
     * const changeRequestsWithIdOnly = await prisma.changeRequests.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends changeRequestsCreateManyAndReturnArgs>(args?: SelectSubset<T, changeRequestsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChangeRequests.
     * @param {changeRequestsDeleteArgs} args - Arguments to delete one ChangeRequests.
     * @example
     * // Delete one ChangeRequests
     * const ChangeRequests = await prisma.changeRequests.delete({
     *   where: {
     *     // ... filter to delete one ChangeRequests
     *   }
     * })
     * 
     */
    delete<T extends changeRequestsDeleteArgs>(args: SelectSubset<T, changeRequestsDeleteArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChangeRequests.
     * @param {changeRequestsUpdateArgs} args - Arguments to update one ChangeRequests.
     * @example
     * // Update one ChangeRequests
     * const changeRequests = await prisma.changeRequests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends changeRequestsUpdateArgs>(args: SelectSubset<T, changeRequestsUpdateArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChangeRequests.
     * @param {changeRequestsDeleteManyArgs} args - Arguments to filter ChangeRequests to delete.
     * @example
     * // Delete a few ChangeRequests
     * const { count } = await prisma.changeRequests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends changeRequestsDeleteManyArgs>(args?: SelectSubset<T, changeRequestsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChangeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {changeRequestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChangeRequests
     * const changeRequests = await prisma.changeRequests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends changeRequestsUpdateManyArgs>(args: SelectSubset<T, changeRequestsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChangeRequests and returns the data updated in the database.
     * @param {changeRequestsUpdateManyAndReturnArgs} args - Arguments to update many ChangeRequests.
     * @example
     * // Update many ChangeRequests
     * const changeRequests = await prisma.changeRequests.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChangeRequests and only return the `id`
     * const changeRequestsWithIdOnly = await prisma.changeRequests.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends changeRequestsUpdateManyAndReturnArgs>(args: SelectSubset<T, changeRequestsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChangeRequests.
     * @param {changeRequestsUpsertArgs} args - Arguments to update or create a ChangeRequests.
     * @example
     * // Update or create a ChangeRequests
     * const changeRequests = await prisma.changeRequests.upsert({
     *   create: {
     *     // ... data to create a ChangeRequests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChangeRequests we want to update
     *   }
     * })
     */
    upsert<T extends changeRequestsUpsertArgs>(args: SelectSubset<T, changeRequestsUpsertArgs<ExtArgs>>): Prisma__changeRequestsClient<$Result.GetResult<Prisma.$changeRequestsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChangeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {changeRequestsCountArgs} args - Arguments to filter ChangeRequests to count.
     * @example
     * // Count the number of ChangeRequests
     * const count = await prisma.changeRequests.count({
     *   where: {
     *     // ... the filter for the ChangeRequests we want to count
     *   }
     * })
    **/
    count<T extends changeRequestsCountArgs>(
      args?: Subset<T, changeRequestsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChangeRequestsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChangeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeRequestsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChangeRequestsAggregateArgs>(args: Subset<T, ChangeRequestsAggregateArgs>): Prisma.PrismaPromise<GetChangeRequestsAggregateType<T>>

    /**
     * Group by ChangeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {changeRequestsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends changeRequestsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: changeRequestsGroupByArgs['orderBy'] }
        : { orderBy?: changeRequestsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, changeRequestsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChangeRequestsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the changeRequests model
   */
  readonly fields: changeRequestsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for changeRequests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__changeRequestsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends transactionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, transactionsDefaultArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the changeRequests model
   */
  interface changeRequestsFieldRefs {
    readonly id: FieldRef<"changeRequests", 'Int'>
    readonly requesterId: FieldRef<"changeRequests", 'Int'>
    readonly targetTransactionId: FieldRef<"changeRequests", 'Int'>
    readonly type: FieldRef<"changeRequests", 'String'>
    readonly status: FieldRef<"changeRequests", 'change_request_status'>
    readonly reason: FieldRef<"changeRequests", 'String'>
    readonly createdAt: FieldRef<"changeRequests", 'DateTime'>
    readonly updatedAt: FieldRef<"changeRequests", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * changeRequests findUnique
   */
  export type changeRequestsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * Filter, which changeRequests to fetch.
     */
    where: changeRequestsWhereUniqueInput
  }

  /**
   * changeRequests findUniqueOrThrow
   */
  export type changeRequestsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * Filter, which changeRequests to fetch.
     */
    where: changeRequestsWhereUniqueInput
  }

  /**
   * changeRequests findFirst
   */
  export type changeRequestsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * Filter, which changeRequests to fetch.
     */
    where?: changeRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of changeRequests to fetch.
     */
    orderBy?: changeRequestsOrderByWithRelationInput | changeRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for changeRequests.
     */
    cursor?: changeRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` changeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` changeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of changeRequests.
     */
    distinct?: ChangeRequestsScalarFieldEnum | ChangeRequestsScalarFieldEnum[]
  }

  /**
   * changeRequests findFirstOrThrow
   */
  export type changeRequestsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * Filter, which changeRequests to fetch.
     */
    where?: changeRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of changeRequests to fetch.
     */
    orderBy?: changeRequestsOrderByWithRelationInput | changeRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for changeRequests.
     */
    cursor?: changeRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` changeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` changeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of changeRequests.
     */
    distinct?: ChangeRequestsScalarFieldEnum | ChangeRequestsScalarFieldEnum[]
  }

  /**
   * changeRequests findMany
   */
  export type changeRequestsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * Filter, which changeRequests to fetch.
     */
    where?: changeRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of changeRequests to fetch.
     */
    orderBy?: changeRequestsOrderByWithRelationInput | changeRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing changeRequests.
     */
    cursor?: changeRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` changeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` changeRequests.
     */
    skip?: number
    distinct?: ChangeRequestsScalarFieldEnum | ChangeRequestsScalarFieldEnum[]
  }

  /**
   * changeRequests create
   */
  export type changeRequestsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * The data needed to create a changeRequests.
     */
    data: XOR<changeRequestsCreateInput, changeRequestsUncheckedCreateInput>
  }

  /**
   * changeRequests createMany
   */
  export type changeRequestsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many changeRequests.
     */
    data: changeRequestsCreateManyInput | changeRequestsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * changeRequests createManyAndReturn
   */
  export type changeRequestsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * The data used to create many changeRequests.
     */
    data: changeRequestsCreateManyInput | changeRequestsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * changeRequests update
   */
  export type changeRequestsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * The data needed to update a changeRequests.
     */
    data: XOR<changeRequestsUpdateInput, changeRequestsUncheckedUpdateInput>
    /**
     * Choose, which changeRequests to update.
     */
    where: changeRequestsWhereUniqueInput
  }

  /**
   * changeRequests updateMany
   */
  export type changeRequestsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update changeRequests.
     */
    data: XOR<changeRequestsUpdateManyMutationInput, changeRequestsUncheckedUpdateManyInput>
    /**
     * Filter which changeRequests to update
     */
    where?: changeRequestsWhereInput
    /**
     * Limit how many changeRequests to update.
     */
    limit?: number
  }

  /**
   * changeRequests updateManyAndReturn
   */
  export type changeRequestsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * The data used to update changeRequests.
     */
    data: XOR<changeRequestsUpdateManyMutationInput, changeRequestsUncheckedUpdateManyInput>
    /**
     * Filter which changeRequests to update
     */
    where?: changeRequestsWhereInput
    /**
     * Limit how many changeRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * changeRequests upsert
   */
  export type changeRequestsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * The filter to search for the changeRequests to update in case it exists.
     */
    where: changeRequestsWhereUniqueInput
    /**
     * In case the changeRequests found by the `where` argument doesn't exist, create a new changeRequests with this data.
     */
    create: XOR<changeRequestsCreateInput, changeRequestsUncheckedCreateInput>
    /**
     * In case the changeRequests was found with the provided `where` argument, update it with this data.
     */
    update: XOR<changeRequestsUpdateInput, changeRequestsUncheckedUpdateInput>
  }

  /**
   * changeRequests delete
   */
  export type changeRequestsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
    /**
     * Filter which changeRequests to delete.
     */
    where: changeRequestsWhereUniqueInput
  }

  /**
   * changeRequests deleteMany
   */
  export type changeRequestsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which changeRequests to delete
     */
    where?: changeRequestsWhereInput
    /**
     * Limit how many changeRequests to delete.
     */
    limit?: number
  }

  /**
   * changeRequests without action
   */
  export type changeRequestsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the changeRequests
     */
    select?: changeRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the changeRequests
     */
    omit?: changeRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: changeRequestsInclude<ExtArgs> | null
  }


  /**
   * Model passwordResets
   */

  export type AggregatePasswordResets = {
    _count: PasswordResetsCountAggregateOutputType | null
    _avg: PasswordResetsAvgAggregateOutputType | null
    _sum: PasswordResetsSumAggregateOutputType | null
    _min: PasswordResetsMinAggregateOutputType | null
    _max: PasswordResetsMaxAggregateOutputType | null
  }

  export type PasswordResetsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordResetsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordResetsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetsCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    used: number
    createdAt: number
    _all: number
  }


  export type PasswordResetsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordResetsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordResetsMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetsMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetsCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which passwordResets to aggregate.
     */
    where?: passwordResetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordResets to fetch.
     */
    orderBy?: passwordResetsOrderByWithRelationInput | passwordResetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: passwordResetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned passwordResets
    **/
    _count?: true | PasswordResetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordResetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordResetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetsMaxAggregateInputType
  }

  export type GetPasswordResetsAggregateType<T extends PasswordResetsAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResets[P]>
      : GetScalarType<T[P], AggregatePasswordResets[P]>
  }




  export type passwordResetsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: passwordResetsWhereInput
    orderBy?: passwordResetsOrderByWithAggregationInput | passwordResetsOrderByWithAggregationInput[]
    by: PasswordResetsScalarFieldEnum[] | PasswordResetsScalarFieldEnum
    having?: passwordResetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetsCountAggregateInputType | true
    _avg?: PasswordResetsAvgAggregateInputType
    _sum?: PasswordResetsSumAggregateInputType
    _min?: PasswordResetsMinAggregateInputType
    _max?: PasswordResetsMaxAggregateInputType
  }

  export type PasswordResetsGroupByOutputType = {
    id: number
    userId: number
    token: string
    expiresAt: Date
    used: boolean
    createdAt: Date | null
    _count: PasswordResetsCountAggregateOutputType | null
    _avg: PasswordResetsAvgAggregateOutputType | null
    _sum: PasswordResetsSumAggregateOutputType | null
    _min: PasswordResetsMinAggregateOutputType | null
    _max: PasswordResetsMaxAggregateOutputType | null
  }

  type GetPasswordResetsGroupByPayload<T extends passwordResetsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetsGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetsGroupByOutputType[P]>
        }
      >
    >


  export type passwordResetsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResets"]>

  export type passwordResetsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResets"]>

  export type passwordResetsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResets"]>

  export type passwordResetsSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
  }

  export type passwordResetsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "used" | "createdAt", ExtArgs["result"]["passwordResets"]>
  export type passwordResetsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type passwordResetsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type passwordResetsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $passwordResetsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "passwordResets"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      token: string
      expiresAt: Date
      used: boolean
      createdAt: Date | null
    }, ExtArgs["result"]["passwordResets"]>
    composites: {}
  }

  type passwordResetsGetPayload<S extends boolean | null | undefined | passwordResetsDefaultArgs> = $Result.GetResult<Prisma.$passwordResetsPayload, S>

  type passwordResetsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<passwordResetsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetsCountAggregateInputType | true
    }

  export interface passwordResetsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['passwordResets'], meta: { name: 'passwordResets' } }
    /**
     * Find zero or one PasswordResets that matches the filter.
     * @param {passwordResetsFindUniqueArgs} args - Arguments to find a PasswordResets
     * @example
     * // Get one PasswordResets
     * const passwordResets = await prisma.passwordResets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends passwordResetsFindUniqueArgs>(args: SelectSubset<T, passwordResetsFindUniqueArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {passwordResetsFindUniqueOrThrowArgs} args - Arguments to find a PasswordResets
     * @example
     * // Get one PasswordResets
     * const passwordResets = await prisma.passwordResets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends passwordResetsFindUniqueOrThrowArgs>(args: SelectSubset<T, passwordResetsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordResetsFindFirstArgs} args - Arguments to find a PasswordResets
     * @example
     * // Get one PasswordResets
     * const passwordResets = await prisma.passwordResets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends passwordResetsFindFirstArgs>(args?: SelectSubset<T, passwordResetsFindFirstArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordResetsFindFirstOrThrowArgs} args - Arguments to find a PasswordResets
     * @example
     * // Get one PasswordResets
     * const passwordResets = await prisma.passwordResets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends passwordResetsFindFirstOrThrowArgs>(args?: SelectSubset<T, passwordResetsFindFirstOrThrowArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordResetsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordResets.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordResets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetsWithIdOnly = await prisma.passwordResets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends passwordResetsFindManyArgs>(args?: SelectSubset<T, passwordResetsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResets.
     * @param {passwordResetsCreateArgs} args - Arguments to create a PasswordResets.
     * @example
     * // Create one PasswordResets
     * const PasswordResets = await prisma.passwordResets.create({
     *   data: {
     *     // ... data to create a PasswordResets
     *   }
     * })
     * 
     */
    create<T extends passwordResetsCreateArgs>(args: SelectSubset<T, passwordResetsCreateArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResets.
     * @param {passwordResetsCreateManyArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordResets = await prisma.passwordResets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends passwordResetsCreateManyArgs>(args?: SelectSubset<T, passwordResetsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResets and returns the data saved in the database.
     * @param {passwordResetsCreateManyAndReturnArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordResets = await prisma.passwordResets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResets and only return the `id`
     * const passwordResetsWithIdOnly = await prisma.passwordResets.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends passwordResetsCreateManyAndReturnArgs>(args?: SelectSubset<T, passwordResetsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResets.
     * @param {passwordResetsDeleteArgs} args - Arguments to delete one PasswordResets.
     * @example
     * // Delete one PasswordResets
     * const PasswordResets = await prisma.passwordResets.delete({
     *   where: {
     *     // ... filter to delete one PasswordResets
     *   }
     * })
     * 
     */
    delete<T extends passwordResetsDeleteArgs>(args: SelectSubset<T, passwordResetsDeleteArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResets.
     * @param {passwordResetsUpdateArgs} args - Arguments to update one PasswordResets.
     * @example
     * // Update one PasswordResets
     * const passwordResets = await prisma.passwordResets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends passwordResetsUpdateArgs>(args: SelectSubset<T, passwordResetsUpdateArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResets.
     * @param {passwordResetsDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordResets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends passwordResetsDeleteManyArgs>(args?: SelectSubset<T, passwordResetsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordResetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordResets = await prisma.passwordResets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends passwordResetsUpdateManyArgs>(args: SelectSubset<T, passwordResetsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets and returns the data updated in the database.
     * @param {passwordResetsUpdateManyAndReturnArgs} args - Arguments to update many PasswordResets.
     * @example
     * // Update many PasswordResets
     * const passwordResets = await prisma.passwordResets.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResets and only return the `id`
     * const passwordResetsWithIdOnly = await prisma.passwordResets.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends passwordResetsUpdateManyAndReturnArgs>(args: SelectSubset<T, passwordResetsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResets.
     * @param {passwordResetsUpsertArgs} args - Arguments to update or create a PasswordResets.
     * @example
     * // Update or create a PasswordResets
     * const passwordResets = await prisma.passwordResets.upsert({
     *   create: {
     *     // ... data to create a PasswordResets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResets we want to update
     *   }
     * })
     */
    upsert<T extends passwordResetsUpsertArgs>(args: SelectSubset<T, passwordResetsUpsertArgs<ExtArgs>>): Prisma__passwordResetsClient<$Result.GetResult<Prisma.$passwordResetsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordResetsCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordResets.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends passwordResetsCountArgs>(
      args?: Subset<T, passwordResetsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetsAggregateArgs>(args: Subset<T, PasswordResetsAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetsAggregateType<T>>

    /**
     * Group by PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passwordResetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends passwordResetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: passwordResetsGroupByArgs['orderBy'] }
        : { orderBy?: passwordResetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, passwordResetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the passwordResets model
   */
  readonly fields: passwordResetsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for passwordResets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__passwordResetsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the passwordResets model
   */
  interface passwordResetsFieldRefs {
    readonly id: FieldRef<"passwordResets", 'Int'>
    readonly userId: FieldRef<"passwordResets", 'Int'>
    readonly token: FieldRef<"passwordResets", 'String'>
    readonly expiresAt: FieldRef<"passwordResets", 'DateTime'>
    readonly used: FieldRef<"passwordResets", 'Boolean'>
    readonly createdAt: FieldRef<"passwordResets", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * passwordResets findUnique
   */
  export type passwordResetsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * Filter, which passwordResets to fetch.
     */
    where: passwordResetsWhereUniqueInput
  }

  /**
   * passwordResets findUniqueOrThrow
   */
  export type passwordResetsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * Filter, which passwordResets to fetch.
     */
    where: passwordResetsWhereUniqueInput
  }

  /**
   * passwordResets findFirst
   */
  export type passwordResetsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * Filter, which passwordResets to fetch.
     */
    where?: passwordResetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordResets to fetch.
     */
    orderBy?: passwordResetsOrderByWithRelationInput | passwordResetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passwordResets.
     */
    cursor?: passwordResetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passwordResets.
     */
    distinct?: PasswordResetsScalarFieldEnum | PasswordResetsScalarFieldEnum[]
  }

  /**
   * passwordResets findFirstOrThrow
   */
  export type passwordResetsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * Filter, which passwordResets to fetch.
     */
    where?: passwordResetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordResets to fetch.
     */
    orderBy?: passwordResetsOrderByWithRelationInput | passwordResetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passwordResets.
     */
    cursor?: passwordResetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passwordResets.
     */
    distinct?: PasswordResetsScalarFieldEnum | PasswordResetsScalarFieldEnum[]
  }

  /**
   * passwordResets findMany
   */
  export type passwordResetsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * Filter, which passwordResets to fetch.
     */
    where?: passwordResetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passwordResets to fetch.
     */
    orderBy?: passwordResetsOrderByWithRelationInput | passwordResetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing passwordResets.
     */
    cursor?: passwordResetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passwordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passwordResets.
     */
    skip?: number
    distinct?: PasswordResetsScalarFieldEnum | PasswordResetsScalarFieldEnum[]
  }

  /**
   * passwordResets create
   */
  export type passwordResetsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * The data needed to create a passwordResets.
     */
    data: XOR<passwordResetsCreateInput, passwordResetsUncheckedCreateInput>
  }

  /**
   * passwordResets createMany
   */
  export type passwordResetsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many passwordResets.
     */
    data: passwordResetsCreateManyInput | passwordResetsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * passwordResets createManyAndReturn
   */
  export type passwordResetsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * The data used to create many passwordResets.
     */
    data: passwordResetsCreateManyInput | passwordResetsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * passwordResets update
   */
  export type passwordResetsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * The data needed to update a passwordResets.
     */
    data: XOR<passwordResetsUpdateInput, passwordResetsUncheckedUpdateInput>
    /**
     * Choose, which passwordResets to update.
     */
    where: passwordResetsWhereUniqueInput
  }

  /**
   * passwordResets updateMany
   */
  export type passwordResetsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update passwordResets.
     */
    data: XOR<passwordResetsUpdateManyMutationInput, passwordResetsUncheckedUpdateManyInput>
    /**
     * Filter which passwordResets to update
     */
    where?: passwordResetsWhereInput
    /**
     * Limit how many passwordResets to update.
     */
    limit?: number
  }

  /**
   * passwordResets updateManyAndReturn
   */
  export type passwordResetsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * The data used to update passwordResets.
     */
    data: XOR<passwordResetsUpdateManyMutationInput, passwordResetsUncheckedUpdateManyInput>
    /**
     * Filter which passwordResets to update
     */
    where?: passwordResetsWhereInput
    /**
     * Limit how many passwordResets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * passwordResets upsert
   */
  export type passwordResetsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * The filter to search for the passwordResets to update in case it exists.
     */
    where: passwordResetsWhereUniqueInput
    /**
     * In case the passwordResets found by the `where` argument doesn't exist, create a new passwordResets with this data.
     */
    create: XOR<passwordResetsCreateInput, passwordResetsUncheckedCreateInput>
    /**
     * In case the passwordResets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<passwordResetsUpdateInput, passwordResetsUncheckedUpdateInput>
  }

  /**
   * passwordResets delete
   */
  export type passwordResetsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
    /**
     * Filter which passwordResets to delete.
     */
    where: passwordResetsWhereUniqueInput
  }

  /**
   * passwordResets deleteMany
   */
  export type passwordResetsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which passwordResets to delete
     */
    where?: passwordResetsWhereInput
    /**
     * Limit how many passwordResets to delete.
     */
    limit?: number
  }

  /**
   * passwordResets without action
   */
  export type passwordResetsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the passwordResets
     */
    select?: passwordResetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the passwordResets
     */
    omit?: passwordResetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: passwordResetsInclude<ExtArgs> | null
  }


  /**
   * Model teamInvitations
   */

  export type AggregateTeamInvitations = {
    _count: TeamInvitationsCountAggregateOutputType | null
    _avg: TeamInvitationsAvgAggregateOutputType | null
    _sum: TeamInvitationsSumAggregateOutputType | null
    _min: TeamInvitationsMinAggregateOutputType | null
    _max: TeamInvitationsMaxAggregateOutputType | null
  }

  export type TeamInvitationsAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
    inviterId: number | null
  }

  export type TeamInvitationsSumAggregateOutputType = {
    id: number | null
    teamId: number | null
    inviterId: number | null
  }

  export type TeamInvitationsMinAggregateOutputType = {
    id: number | null
    token: string | null
    teamId: number | null
    inviterId: number | null
    inviteeEmail: string | null
    status: $Enums.invitation_status | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type TeamInvitationsMaxAggregateOutputType = {
    id: number | null
    token: string | null
    teamId: number | null
    inviterId: number | null
    inviteeEmail: string | null
    status: $Enums.invitation_status | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type TeamInvitationsCountAggregateOutputType = {
    id: number
    token: number
    teamId: number
    inviterId: number
    inviteeEmail: number
    status: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type TeamInvitationsAvgAggregateInputType = {
    id?: true
    teamId?: true
    inviterId?: true
  }

  export type TeamInvitationsSumAggregateInputType = {
    id?: true
    teamId?: true
    inviterId?: true
  }

  export type TeamInvitationsMinAggregateInputType = {
    id?: true
    token?: true
    teamId?: true
    inviterId?: true
    inviteeEmail?: true
    status?: true
    createdAt?: true
    expiresAt?: true
  }

  export type TeamInvitationsMaxAggregateInputType = {
    id?: true
    token?: true
    teamId?: true
    inviterId?: true
    inviteeEmail?: true
    status?: true
    createdAt?: true
    expiresAt?: true
  }

  export type TeamInvitationsCountAggregateInputType = {
    id?: true
    token?: true
    teamId?: true
    inviterId?: true
    inviteeEmail?: true
    status?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type TeamInvitationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teamInvitations to aggregate.
     */
    where?: teamInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamInvitations to fetch.
     */
    orderBy?: teamInvitationsOrderByWithRelationInput | teamInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teamInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teamInvitations
    **/
    _count?: true | TeamInvitationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamInvitationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamInvitationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamInvitationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamInvitationsMaxAggregateInputType
  }

  export type GetTeamInvitationsAggregateType<T extends TeamInvitationsAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamInvitations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamInvitations[P]>
      : GetScalarType<T[P], AggregateTeamInvitations[P]>
  }




  export type teamInvitationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamInvitationsWhereInput
    orderBy?: teamInvitationsOrderByWithAggregationInput | teamInvitationsOrderByWithAggregationInput[]
    by: TeamInvitationsScalarFieldEnum[] | TeamInvitationsScalarFieldEnum
    having?: teamInvitationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamInvitationsCountAggregateInputType | true
    _avg?: TeamInvitationsAvgAggregateInputType
    _sum?: TeamInvitationsSumAggregateInputType
    _min?: TeamInvitationsMinAggregateInputType
    _max?: TeamInvitationsMaxAggregateInputType
  }

  export type TeamInvitationsGroupByOutputType = {
    id: number
    token: string
    teamId: number
    inviterId: number
    inviteeEmail: string
    status: $Enums.invitation_status
    createdAt: Date | null
    expiresAt: Date | null
    _count: TeamInvitationsCountAggregateOutputType | null
    _avg: TeamInvitationsAvgAggregateOutputType | null
    _sum: TeamInvitationsSumAggregateOutputType | null
    _min: TeamInvitationsMinAggregateOutputType | null
    _max: TeamInvitationsMaxAggregateOutputType | null
  }

  type GetTeamInvitationsGroupByPayload<T extends teamInvitationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamInvitationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamInvitationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamInvitationsGroupByOutputType[P]>
            : GetScalarType<T[P], TeamInvitationsGroupByOutputType[P]>
        }
      >
    >


  export type teamInvitationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    teamId?: boolean
    inviterId?: boolean
    inviteeEmail?: boolean
    status?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamInvitations"]>

  export type teamInvitationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    teamId?: boolean
    inviterId?: boolean
    inviteeEmail?: boolean
    status?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamInvitations"]>

  export type teamInvitationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    teamId?: boolean
    inviterId?: boolean
    inviteeEmail?: boolean
    status?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamInvitations"]>

  export type teamInvitationsSelectScalar = {
    id?: boolean
    token?: boolean
    teamId?: boolean
    inviterId?: boolean
    inviteeEmail?: boolean
    status?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }

  export type teamInvitationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "teamId" | "inviterId" | "inviteeEmail" | "status" | "createdAt" | "expiresAt", ExtArgs["result"]["teamInvitations"]>
  export type teamInvitationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
  }
  export type teamInvitationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
  }
  export type teamInvitationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    teams?: boolean | teamsDefaultArgs<ExtArgs>
  }

  export type $teamInvitationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "teamInvitations"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      teams: Prisma.$teamsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      token: string
      teamId: number
      inviterId: number
      inviteeEmail: string
      status: $Enums.invitation_status
      createdAt: Date | null
      expiresAt: Date | null
    }, ExtArgs["result"]["teamInvitations"]>
    composites: {}
  }

  type teamInvitationsGetPayload<S extends boolean | null | undefined | teamInvitationsDefaultArgs> = $Result.GetResult<Prisma.$teamInvitationsPayload, S>

  type teamInvitationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<teamInvitationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamInvitationsCountAggregateInputType | true
    }

  export interface teamInvitationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['teamInvitations'], meta: { name: 'teamInvitations' } }
    /**
     * Find zero or one TeamInvitations that matches the filter.
     * @param {teamInvitationsFindUniqueArgs} args - Arguments to find a TeamInvitations
     * @example
     * // Get one TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends teamInvitationsFindUniqueArgs>(args: SelectSubset<T, teamInvitationsFindUniqueArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamInvitations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {teamInvitationsFindUniqueOrThrowArgs} args - Arguments to find a TeamInvitations
     * @example
     * // Get one TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends teamInvitationsFindUniqueOrThrowArgs>(args: SelectSubset<T, teamInvitationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamInvitationsFindFirstArgs} args - Arguments to find a TeamInvitations
     * @example
     * // Get one TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends teamInvitationsFindFirstArgs>(args?: SelectSubset<T, teamInvitationsFindFirstArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamInvitations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamInvitationsFindFirstOrThrowArgs} args - Arguments to find a TeamInvitations
     * @example
     * // Get one TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends teamInvitationsFindFirstOrThrowArgs>(args?: SelectSubset<T, teamInvitationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamInvitationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.findMany()
     * 
     * // Get first 10 TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamInvitationsWithIdOnly = await prisma.teamInvitations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends teamInvitationsFindManyArgs>(args?: SelectSubset<T, teamInvitationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamInvitations.
     * @param {teamInvitationsCreateArgs} args - Arguments to create a TeamInvitations.
     * @example
     * // Create one TeamInvitations
     * const TeamInvitations = await prisma.teamInvitations.create({
     *   data: {
     *     // ... data to create a TeamInvitations
     *   }
     * })
     * 
     */
    create<T extends teamInvitationsCreateArgs>(args: SelectSubset<T, teamInvitationsCreateArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamInvitations.
     * @param {teamInvitationsCreateManyArgs} args - Arguments to create many TeamInvitations.
     * @example
     * // Create many TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends teamInvitationsCreateManyArgs>(args?: SelectSubset<T, teamInvitationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamInvitations and returns the data saved in the database.
     * @param {teamInvitationsCreateManyAndReturnArgs} args - Arguments to create many TeamInvitations.
     * @example
     * // Create many TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamInvitations and only return the `id`
     * const teamInvitationsWithIdOnly = await prisma.teamInvitations.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends teamInvitationsCreateManyAndReturnArgs>(args?: SelectSubset<T, teamInvitationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamInvitations.
     * @param {teamInvitationsDeleteArgs} args - Arguments to delete one TeamInvitations.
     * @example
     * // Delete one TeamInvitations
     * const TeamInvitations = await prisma.teamInvitations.delete({
     *   where: {
     *     // ... filter to delete one TeamInvitations
     *   }
     * })
     * 
     */
    delete<T extends teamInvitationsDeleteArgs>(args: SelectSubset<T, teamInvitationsDeleteArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamInvitations.
     * @param {teamInvitationsUpdateArgs} args - Arguments to update one TeamInvitations.
     * @example
     * // Update one TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends teamInvitationsUpdateArgs>(args: SelectSubset<T, teamInvitationsUpdateArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamInvitations.
     * @param {teamInvitationsDeleteManyArgs} args - Arguments to filter TeamInvitations to delete.
     * @example
     * // Delete a few TeamInvitations
     * const { count } = await prisma.teamInvitations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends teamInvitationsDeleteManyArgs>(args?: SelectSubset<T, teamInvitationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamInvitationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends teamInvitationsUpdateManyArgs>(args: SelectSubset<T, teamInvitationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamInvitations and returns the data updated in the database.
     * @param {teamInvitationsUpdateManyAndReturnArgs} args - Arguments to update many TeamInvitations.
     * @example
     * // Update many TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamInvitations and only return the `id`
     * const teamInvitationsWithIdOnly = await prisma.teamInvitations.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends teamInvitationsUpdateManyAndReturnArgs>(args: SelectSubset<T, teamInvitationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamInvitations.
     * @param {teamInvitationsUpsertArgs} args - Arguments to update or create a TeamInvitations.
     * @example
     * // Update or create a TeamInvitations
     * const teamInvitations = await prisma.teamInvitations.upsert({
     *   create: {
     *     // ... data to create a TeamInvitations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamInvitations we want to update
     *   }
     * })
     */
    upsert<T extends teamInvitationsUpsertArgs>(args: SelectSubset<T, teamInvitationsUpsertArgs<ExtArgs>>): Prisma__teamInvitationsClient<$Result.GetResult<Prisma.$teamInvitationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamInvitationsCountArgs} args - Arguments to filter TeamInvitations to count.
     * @example
     * // Count the number of TeamInvitations
     * const count = await prisma.teamInvitations.count({
     *   where: {
     *     // ... the filter for the TeamInvitations we want to count
     *   }
     * })
    **/
    count<T extends teamInvitationsCountArgs>(
      args?: Subset<T, teamInvitationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamInvitationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamInvitationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamInvitationsAggregateArgs>(args: Subset<T, TeamInvitationsAggregateArgs>): Prisma.PrismaPromise<GetTeamInvitationsAggregateType<T>>

    /**
     * Group by TeamInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamInvitationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends teamInvitationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: teamInvitationsGroupByArgs['orderBy'] }
        : { orderBy?: teamInvitationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, teamInvitationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamInvitationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the teamInvitations model
   */
  readonly fields: teamInvitationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for teamInvitations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__teamInvitationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teams<T extends teamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, teamsDefaultArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the teamInvitations model
   */
  interface teamInvitationsFieldRefs {
    readonly id: FieldRef<"teamInvitations", 'Int'>
    readonly token: FieldRef<"teamInvitations", 'String'>
    readonly teamId: FieldRef<"teamInvitations", 'Int'>
    readonly inviterId: FieldRef<"teamInvitations", 'Int'>
    readonly inviteeEmail: FieldRef<"teamInvitations", 'String'>
    readonly status: FieldRef<"teamInvitations", 'invitation_status'>
    readonly createdAt: FieldRef<"teamInvitations", 'DateTime'>
    readonly expiresAt: FieldRef<"teamInvitations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * teamInvitations findUnique
   */
  export type teamInvitationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which teamInvitations to fetch.
     */
    where: teamInvitationsWhereUniqueInput
  }

  /**
   * teamInvitations findUniqueOrThrow
   */
  export type teamInvitationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which teamInvitations to fetch.
     */
    where: teamInvitationsWhereUniqueInput
  }

  /**
   * teamInvitations findFirst
   */
  export type teamInvitationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which teamInvitations to fetch.
     */
    where?: teamInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamInvitations to fetch.
     */
    orderBy?: teamInvitationsOrderByWithRelationInput | teamInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teamInvitations.
     */
    cursor?: teamInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teamInvitations.
     */
    distinct?: TeamInvitationsScalarFieldEnum | TeamInvitationsScalarFieldEnum[]
  }

  /**
   * teamInvitations findFirstOrThrow
   */
  export type teamInvitationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which teamInvitations to fetch.
     */
    where?: teamInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamInvitations to fetch.
     */
    orderBy?: teamInvitationsOrderByWithRelationInput | teamInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teamInvitations.
     */
    cursor?: teamInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teamInvitations.
     */
    distinct?: TeamInvitationsScalarFieldEnum | TeamInvitationsScalarFieldEnum[]
  }

  /**
   * teamInvitations findMany
   */
  export type teamInvitationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which teamInvitations to fetch.
     */
    where?: teamInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamInvitations to fetch.
     */
    orderBy?: teamInvitationsOrderByWithRelationInput | teamInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teamInvitations.
     */
    cursor?: teamInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamInvitations.
     */
    skip?: number
    distinct?: TeamInvitationsScalarFieldEnum | TeamInvitationsScalarFieldEnum[]
  }

  /**
   * teamInvitations create
   */
  export type teamInvitationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * The data needed to create a teamInvitations.
     */
    data: XOR<teamInvitationsCreateInput, teamInvitationsUncheckedCreateInput>
  }

  /**
   * teamInvitations createMany
   */
  export type teamInvitationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many teamInvitations.
     */
    data: teamInvitationsCreateManyInput | teamInvitationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * teamInvitations createManyAndReturn
   */
  export type teamInvitationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * The data used to create many teamInvitations.
     */
    data: teamInvitationsCreateManyInput | teamInvitationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * teamInvitations update
   */
  export type teamInvitationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * The data needed to update a teamInvitations.
     */
    data: XOR<teamInvitationsUpdateInput, teamInvitationsUncheckedUpdateInput>
    /**
     * Choose, which teamInvitations to update.
     */
    where: teamInvitationsWhereUniqueInput
  }

  /**
   * teamInvitations updateMany
   */
  export type teamInvitationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update teamInvitations.
     */
    data: XOR<teamInvitationsUpdateManyMutationInput, teamInvitationsUncheckedUpdateManyInput>
    /**
     * Filter which teamInvitations to update
     */
    where?: teamInvitationsWhereInput
    /**
     * Limit how many teamInvitations to update.
     */
    limit?: number
  }

  /**
   * teamInvitations updateManyAndReturn
   */
  export type teamInvitationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * The data used to update teamInvitations.
     */
    data: XOR<teamInvitationsUpdateManyMutationInput, teamInvitationsUncheckedUpdateManyInput>
    /**
     * Filter which teamInvitations to update
     */
    where?: teamInvitationsWhereInput
    /**
     * Limit how many teamInvitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * teamInvitations upsert
   */
  export type teamInvitationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * The filter to search for the teamInvitations to update in case it exists.
     */
    where: teamInvitationsWhereUniqueInput
    /**
     * In case the teamInvitations found by the `where` argument doesn't exist, create a new teamInvitations with this data.
     */
    create: XOR<teamInvitationsCreateInput, teamInvitationsUncheckedCreateInput>
    /**
     * In case the teamInvitations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teamInvitationsUpdateInput, teamInvitationsUncheckedUpdateInput>
  }

  /**
   * teamInvitations delete
   */
  export type teamInvitationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
    /**
     * Filter which teamInvitations to delete.
     */
    where: teamInvitationsWhereUniqueInput
  }

  /**
   * teamInvitations deleteMany
   */
  export type teamInvitationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teamInvitations to delete
     */
    where?: teamInvitationsWhereInput
    /**
     * Limit how many teamInvitations to delete.
     */
    limit?: number
  }

  /**
   * teamInvitations without action
   */
  export type teamInvitationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamInvitations
     */
    select?: teamInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamInvitations
     */
    omit?: teamInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInvitationsInclude<ExtArgs> | null
  }


  /**
   * Model teamMembers
   */

  export type AggregateTeamMembers = {
    _count: TeamMembersCountAggregateOutputType | null
    _avg: TeamMembersAvgAggregateOutputType | null
    _sum: TeamMembersSumAggregateOutputType | null
    _min: TeamMembersMinAggregateOutputType | null
    _max: TeamMembersMaxAggregateOutputType | null
  }

  export type TeamMembersAvgAggregateOutputType = {
    teamId: number | null
    userId: number | null
  }

  export type TeamMembersSumAggregateOutputType = {
    teamId: number | null
    userId: number | null
  }

  export type TeamMembersMinAggregateOutputType = {
    teamId: number | null
    userId: number | null
    role: string | null
    joinedAt: Date | null
  }

  export type TeamMembersMaxAggregateOutputType = {
    teamId: number | null
    userId: number | null
    role: string | null
    joinedAt: Date | null
  }

  export type TeamMembersCountAggregateOutputType = {
    teamId: number
    userId: number
    role: number
    joinedAt: number
    _all: number
  }


  export type TeamMembersAvgAggregateInputType = {
    teamId?: true
    userId?: true
  }

  export type TeamMembersSumAggregateInputType = {
    teamId?: true
    userId?: true
  }

  export type TeamMembersMinAggregateInputType = {
    teamId?: true
    userId?: true
    role?: true
    joinedAt?: true
  }

  export type TeamMembersMaxAggregateInputType = {
    teamId?: true
    userId?: true
    role?: true
    joinedAt?: true
  }

  export type TeamMembersCountAggregateInputType = {
    teamId?: true
    userId?: true
    role?: true
    joinedAt?: true
    _all?: true
  }

  export type TeamMembersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teamMembers to aggregate.
     */
    where?: teamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamMembers to fetch.
     */
    orderBy?: teamMembersOrderByWithRelationInput | teamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teamMembers
    **/
    _count?: true | TeamMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamMembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamMembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMembersMaxAggregateInputType
  }

  export type GetTeamMembersAggregateType<T extends TeamMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMembers[P]>
      : GetScalarType<T[P], AggregateTeamMembers[P]>
  }




  export type teamMembersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamMembersWhereInput
    orderBy?: teamMembersOrderByWithAggregationInput | teamMembersOrderByWithAggregationInput[]
    by: TeamMembersScalarFieldEnum[] | TeamMembersScalarFieldEnum
    having?: teamMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMembersCountAggregateInputType | true
    _avg?: TeamMembersAvgAggregateInputType
    _sum?: TeamMembersSumAggregateInputType
    _min?: TeamMembersMinAggregateInputType
    _max?: TeamMembersMaxAggregateInputType
  }

  export type TeamMembersGroupByOutputType = {
    teamId: number
    userId: number
    role: string | null
    joinedAt: Date | null
    _count: TeamMembersCountAggregateOutputType | null
    _avg: TeamMembersAvgAggregateOutputType | null
    _sum: TeamMembersSumAggregateOutputType | null
    _min: TeamMembersMinAggregateOutputType | null
    _max: TeamMembersMaxAggregateOutputType | null
  }

  type GetTeamMembersGroupByPayload<T extends teamMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMembersGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMembersGroupByOutputType[P]>
        }
      >
    >


  export type teamMembersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teamId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembers"]>

  export type teamMembersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teamId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembers"]>

  export type teamMembersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teamId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembers"]>

  export type teamMembersSelectScalar = {
    teamId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
  }

  export type teamMembersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"teamId" | "userId" | "role" | "joinedAt", ExtArgs["result"]["teamMembers"]>
  export type teamMembersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type teamMembersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type teamMembersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | teamsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $teamMembersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "teamMembers"
    objects: {
      teams: Prisma.$teamsPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      teamId: number
      userId: number
      role: string | null
      joinedAt: Date | null
    }, ExtArgs["result"]["teamMembers"]>
    composites: {}
  }

  type teamMembersGetPayload<S extends boolean | null | undefined | teamMembersDefaultArgs> = $Result.GetResult<Prisma.$teamMembersPayload, S>

  type teamMembersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<teamMembersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMembersCountAggregateInputType | true
    }

  export interface teamMembersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['teamMembers'], meta: { name: 'teamMembers' } }
    /**
     * Find zero or one TeamMembers that matches the filter.
     * @param {teamMembersFindUniqueArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends teamMembersFindUniqueArgs>(args: SelectSubset<T, teamMembersFindUniqueArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMembers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {teamMembersFindUniqueOrThrowArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends teamMembersFindUniqueOrThrowArgs>(args: SelectSubset<T, teamMembersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamMembersFindFirstArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends teamMembersFindFirstArgs>(args?: SelectSubset<T, teamMembersFindFirstArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMembers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamMembersFindFirstOrThrowArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends teamMembersFindFirstOrThrowArgs>(args?: SelectSubset<T, teamMembersFindFirstOrThrowArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamMembersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMembers.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMembers.findMany({ take: 10 })
     * 
     * // Only select the `teamId`
     * const teamMembersWithTeamIdOnly = await prisma.teamMembers.findMany({ select: { teamId: true } })
     * 
     */
    findMany<T extends teamMembersFindManyArgs>(args?: SelectSubset<T, teamMembersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMembers.
     * @param {teamMembersCreateArgs} args - Arguments to create a TeamMembers.
     * @example
     * // Create one TeamMembers
     * const TeamMembers = await prisma.teamMembers.create({
     *   data: {
     *     // ... data to create a TeamMembers
     *   }
     * })
     * 
     */
    create<T extends teamMembersCreateArgs>(args: SelectSubset<T, teamMembersCreateArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {teamMembersCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMembers = await prisma.teamMembers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends teamMembersCreateManyArgs>(args?: SelectSubset<T, teamMembersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamMembers and returns the data saved in the database.
     * @param {teamMembersCreateManyAndReturnArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMembers = await prisma.teamMembers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamMembers and only return the `teamId`
     * const teamMembersWithTeamIdOnly = await prisma.teamMembers.createManyAndReturn({
     *   select: { teamId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends teamMembersCreateManyAndReturnArgs>(args?: SelectSubset<T, teamMembersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamMembers.
     * @param {teamMembersDeleteArgs} args - Arguments to delete one TeamMembers.
     * @example
     * // Delete one TeamMembers
     * const TeamMembers = await prisma.teamMembers.delete({
     *   where: {
     *     // ... filter to delete one TeamMembers
     *   }
     * })
     * 
     */
    delete<T extends teamMembersDeleteArgs>(args: SelectSubset<T, teamMembersDeleteArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMembers.
     * @param {teamMembersUpdateArgs} args - Arguments to update one TeamMembers.
     * @example
     * // Update one TeamMembers
     * const teamMembers = await prisma.teamMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends teamMembersUpdateArgs>(args: SelectSubset<T, teamMembersUpdateArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {teamMembersDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends teamMembersDeleteManyArgs>(args?: SelectSubset<T, teamMembersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMembers = await prisma.teamMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends teamMembersUpdateManyArgs>(args: SelectSubset<T, teamMembersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers and returns the data updated in the database.
     * @param {teamMembersUpdateManyAndReturnArgs} args - Arguments to update many TeamMembers.
     * @example
     * // Update many TeamMembers
     * const teamMembers = await prisma.teamMembers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamMembers and only return the `teamId`
     * const teamMembersWithTeamIdOnly = await prisma.teamMembers.updateManyAndReturn({
     *   select: { teamId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends teamMembersUpdateManyAndReturnArgs>(args: SelectSubset<T, teamMembersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamMembers.
     * @param {teamMembersUpsertArgs} args - Arguments to update or create a TeamMembers.
     * @example
     * // Update or create a TeamMembers
     * const teamMembers = await prisma.teamMembers.upsert({
     *   create: {
     *     // ... data to create a TeamMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMembers we want to update
     *   }
     * })
     */
    upsert<T extends teamMembersUpsertArgs>(args: SelectSubset<T, teamMembersUpsertArgs<ExtArgs>>): Prisma__teamMembersClient<$Result.GetResult<Prisma.$teamMembersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamMembersCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMembers.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends teamMembersCountArgs>(
      args?: Subset<T, teamMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMembersAggregateArgs>(args: Subset<T, TeamMembersAggregateArgs>): Prisma.PrismaPromise<GetTeamMembersAggregateType<T>>

    /**
     * Group by TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends teamMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: teamMembersGroupByArgs['orderBy'] }
        : { orderBy?: teamMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, teamMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the teamMembers model
   */
  readonly fields: teamMembersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for teamMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__teamMembersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teams<T extends teamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, teamsDefaultArgs<ExtArgs>>): Prisma__teamsClient<$Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the teamMembers model
   */
  interface teamMembersFieldRefs {
    readonly teamId: FieldRef<"teamMembers", 'Int'>
    readonly userId: FieldRef<"teamMembers", 'Int'>
    readonly role: FieldRef<"teamMembers", 'String'>
    readonly joinedAt: FieldRef<"teamMembers", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * teamMembers findUnique
   */
  export type teamMembersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * Filter, which teamMembers to fetch.
     */
    where: teamMembersWhereUniqueInput
  }

  /**
   * teamMembers findUniqueOrThrow
   */
  export type teamMembersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * Filter, which teamMembers to fetch.
     */
    where: teamMembersWhereUniqueInput
  }

  /**
   * teamMembers findFirst
   */
  export type teamMembersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * Filter, which teamMembers to fetch.
     */
    where?: teamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamMembers to fetch.
     */
    orderBy?: teamMembersOrderByWithRelationInput | teamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teamMembers.
     */
    cursor?: teamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teamMembers.
     */
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * teamMembers findFirstOrThrow
   */
  export type teamMembersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * Filter, which teamMembers to fetch.
     */
    where?: teamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamMembers to fetch.
     */
    orderBy?: teamMembersOrderByWithRelationInput | teamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teamMembers.
     */
    cursor?: teamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teamMembers.
     */
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * teamMembers findMany
   */
  export type teamMembersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * Filter, which teamMembers to fetch.
     */
    where?: teamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teamMembers to fetch.
     */
    orderBy?: teamMembersOrderByWithRelationInput | teamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teamMembers.
     */
    cursor?: teamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teamMembers.
     */
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * teamMembers create
   */
  export type teamMembersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * The data needed to create a teamMembers.
     */
    data: XOR<teamMembersCreateInput, teamMembersUncheckedCreateInput>
  }

  /**
   * teamMembers createMany
   */
  export type teamMembersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many teamMembers.
     */
    data: teamMembersCreateManyInput | teamMembersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * teamMembers createManyAndReturn
   */
  export type teamMembersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * The data used to create many teamMembers.
     */
    data: teamMembersCreateManyInput | teamMembersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * teamMembers update
   */
  export type teamMembersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * The data needed to update a teamMembers.
     */
    data: XOR<teamMembersUpdateInput, teamMembersUncheckedUpdateInput>
    /**
     * Choose, which teamMembers to update.
     */
    where: teamMembersWhereUniqueInput
  }

  /**
   * teamMembers updateMany
   */
  export type teamMembersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update teamMembers.
     */
    data: XOR<teamMembersUpdateManyMutationInput, teamMembersUncheckedUpdateManyInput>
    /**
     * Filter which teamMembers to update
     */
    where?: teamMembersWhereInput
    /**
     * Limit how many teamMembers to update.
     */
    limit?: number
  }

  /**
   * teamMembers updateManyAndReturn
   */
  export type teamMembersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * The data used to update teamMembers.
     */
    data: XOR<teamMembersUpdateManyMutationInput, teamMembersUncheckedUpdateManyInput>
    /**
     * Filter which teamMembers to update
     */
    where?: teamMembersWhereInput
    /**
     * Limit how many teamMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * teamMembers upsert
   */
  export type teamMembersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * The filter to search for the teamMembers to update in case it exists.
     */
    where: teamMembersWhereUniqueInput
    /**
     * In case the teamMembers found by the `where` argument doesn't exist, create a new teamMembers with this data.
     */
    create: XOR<teamMembersCreateInput, teamMembersUncheckedCreateInput>
    /**
     * In case the teamMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teamMembersUpdateInput, teamMembersUncheckedUpdateInput>
  }

  /**
   * teamMembers delete
   */
  export type teamMembersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
    /**
     * Filter which teamMembers to delete.
     */
    where: teamMembersWhereUniqueInput
  }

  /**
   * teamMembers deleteMany
   */
  export type teamMembersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teamMembers to delete
     */
    where?: teamMembersWhereInput
    /**
     * Limit how many teamMembers to delete.
     */
    limit?: number
  }

  /**
   * teamMembers without action
   */
  export type teamMembersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teamMembers
     */
    select?: teamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teamMembers
     */
    omit?: teamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamMembersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    passwordHash: 'passwordHash',
    gender: 'gender',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    teamId: 'teamId',
    type: 'type',
    message: 'message',
    isRead: 'isRead',
    relatedResourceId: 'relatedResourceId',
    createdAt: 'createdAt'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const TeamsScalarFieldEnum: {
    id: 'id',
    teamName: 'teamName',
    ownerId: 'ownerId',
    currency: 'currency',
    budget: 'budget',
    incomeGoal: 'incomeGoal',
    allowMemberViewReport: 'allowMemberViewReport',
    categories: 'categories',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamsScalarFieldEnum = (typeof TeamsScalarFieldEnum)[keyof typeof TeamsScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    userId: 'userId',
    amount: 'amount',
    type: 'type',
    categoryName: 'categoryName',
    categoryIcon: 'categoryIcon',
    description: 'description',
    transactionDate: 'transactionDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const ChangeRequestsScalarFieldEnum: {
    id: 'id',
    requesterId: 'requesterId',
    targetTransactionId: 'targetTransactionId',
    type: 'type',
    status: 'status',
    reason: 'reason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChangeRequestsScalarFieldEnum = (typeof ChangeRequestsScalarFieldEnum)[keyof typeof ChangeRequestsScalarFieldEnum]


  export const PasswordResetsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    used: 'used',
    createdAt: 'createdAt'
  };

  export type PasswordResetsScalarFieldEnum = (typeof PasswordResetsScalarFieldEnum)[keyof typeof PasswordResetsScalarFieldEnum]


  export const TeamInvitationsScalarFieldEnum: {
    id: 'id',
    token: 'token',
    teamId: 'teamId',
    inviterId: 'inviterId',
    inviteeEmail: 'inviteeEmail',
    status: 'status',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type TeamInvitationsScalarFieldEnum = (typeof TeamInvitationsScalarFieldEnum)[keyof typeof TeamInvitationsScalarFieldEnum]


  export const TeamMembersScalarFieldEnum: {
    teamId: 'teamId',
    userId: 'userId',
    role: 'role',
    joinedAt: 'joinedAt'
  };

  export type TeamMembersScalarFieldEnum = (typeof TeamMembersScalarFieldEnum)[keyof typeof TeamMembersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'transaction_type'
   */
  export type Enumtransaction_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transaction_type'>
    


  /**
   * Reference to a field of type 'transaction_type[]'
   */
  export type ListEnumtransaction_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transaction_type[]'>
    


  /**
   * Reference to a field of type 'change_request_status'
   */
  export type Enumchange_request_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'change_request_status'>
    


  /**
   * Reference to a field of type 'change_request_status[]'
   */
  export type ListEnumchange_request_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'change_request_status[]'>
    


  /**
   * Reference to a field of type 'invitation_status'
   */
  export type Enuminvitation_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'invitation_status'>
    


  /**
   * Reference to a field of type 'invitation_status[]'
   */
  export type ListEnuminvitation_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'invitation_status[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    gender?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    changeRequests?: ChangeRequestsListRelationFilter
    notifications?: NotificationsListRelationFilter
    passwordResets?: PasswordResetsListRelationFilter
    teamInvitations?: TeamInvitationsListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
    teams?: TeamsListRelationFilter
    transactions?: TransactionsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    changeRequests?: changeRequestsOrderByRelationAggregateInput
    notifications?: notificationsOrderByRelationAggregateInput
    passwordResets?: passwordResetsOrderByRelationAggregateInput
    teamInvitations?: teamInvitationsOrderByRelationAggregateInput
    teamMembers?: teamMembersOrderByRelationAggregateInput
    teams?: teamsOrderByRelationAggregateInput
    transactions?: transactionsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    gender?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"User"> | Date | string | null
    changeRequests?: ChangeRequestsListRelationFilter
    notifications?: NotificationsListRelationFilter
    passwordResets?: PasswordResetsListRelationFilter
    teamInvitations?: TeamInvitationsListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
    teams?: TeamsListRelationFilter
    transactions?: TransactionsListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type notificationsWhereInput = {
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    id?: IntFilter<"notifications"> | number
    userId?: IntFilter<"notifications"> | number
    teamId?: IntNullableFilter<"notifications"> | number | null
    type?: StringFilter<"notifications"> | string
    message?: StringFilter<"notifications"> | string
    isRead?: BoolNullableFilter<"notifications"> | boolean | null
    relatedResourceId?: IntNullableFilter<"notifications"> | number | null
    createdAt?: DateTimeNullableFilter<"notifications"> | Date | string | null
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type notificationsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrderInput | SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrderInput | SortOrder
    relatedResourceId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    teams?: teamsOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type notificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    userId?: IntFilter<"notifications"> | number
    teamId?: IntNullableFilter<"notifications"> | number | null
    type?: StringFilter<"notifications"> | string
    message?: StringFilter<"notifications"> | string
    isRead?: BoolNullableFilter<"notifications"> | boolean | null
    relatedResourceId?: IntNullableFilter<"notifications"> | number | null
    createdAt?: DateTimeNullableFilter<"notifications"> | Date | string | null
    teams?: XOR<TeamsNullableScalarRelationFilter, teamsWhereInput> | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type notificationsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrderInput | SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrderInput | SortOrder
    relatedResourceId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: notificationsCountOrderByAggregateInput
    _avg?: notificationsAvgOrderByAggregateInput
    _max?: notificationsMaxOrderByAggregateInput
    _min?: notificationsMinOrderByAggregateInput
    _sum?: notificationsSumOrderByAggregateInput
  }

  export type notificationsScalarWhereWithAggregatesInput = {
    AND?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    OR?: notificationsScalarWhereWithAggregatesInput[]
    NOT?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"notifications"> | number
    userId?: IntWithAggregatesFilter<"notifications"> | number
    teamId?: IntNullableWithAggregatesFilter<"notifications"> | number | null
    type?: StringWithAggregatesFilter<"notifications"> | string
    message?: StringWithAggregatesFilter<"notifications"> | string
    isRead?: BoolNullableWithAggregatesFilter<"notifications"> | boolean | null
    relatedResourceId?: IntNullableWithAggregatesFilter<"notifications"> | number | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"notifications"> | Date | string | null
  }

  export type teamsWhereInput = {
    AND?: teamsWhereInput | teamsWhereInput[]
    OR?: teamsWhereInput[]
    NOT?: teamsWhereInput | teamsWhereInput[]
    id?: IntFilter<"teams"> | number
    teamName?: StringFilter<"teams"> | string
    ownerId?: IntFilter<"teams"> | number
    currency?: StringFilter<"teams"> | string
    budget?: DecimalNullableFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: DecimalNullableFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: BoolNullableFilter<"teams"> | boolean | null
    categories?: JsonFilter<"teams">
    createdAt?: DateTimeNullableFilter<"teams"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"teams"> | Date | string | null
    notifications?: NotificationsListRelationFilter
    teamInvitations?: TeamInvitationsListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionsListRelationFilter
  }

  export type teamsOrderByWithRelationInput = {
    id?: SortOrder
    teamName?: SortOrder
    ownerId?: SortOrder
    currency?: SortOrder
    budget?: SortOrderInput | SortOrder
    incomeGoal?: SortOrderInput | SortOrder
    allowMemberViewReport?: SortOrderInput | SortOrder
    categories?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    notifications?: notificationsOrderByRelationAggregateInput
    teamInvitations?: teamInvitationsOrderByRelationAggregateInput
    teamMembers?: teamMembersOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
    transactions?: transactionsOrderByRelationAggregateInput
  }

  export type teamsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: teamsWhereInput | teamsWhereInput[]
    OR?: teamsWhereInput[]
    NOT?: teamsWhereInput | teamsWhereInput[]
    teamName?: StringFilter<"teams"> | string
    ownerId?: IntFilter<"teams"> | number
    currency?: StringFilter<"teams"> | string
    budget?: DecimalNullableFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: DecimalNullableFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: BoolNullableFilter<"teams"> | boolean | null
    categories?: JsonFilter<"teams">
    createdAt?: DateTimeNullableFilter<"teams"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"teams"> | Date | string | null
    notifications?: NotificationsListRelationFilter
    teamInvitations?: TeamInvitationsListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionsListRelationFilter
  }, "id">

  export type teamsOrderByWithAggregationInput = {
    id?: SortOrder
    teamName?: SortOrder
    ownerId?: SortOrder
    currency?: SortOrder
    budget?: SortOrderInput | SortOrder
    incomeGoal?: SortOrderInput | SortOrder
    allowMemberViewReport?: SortOrderInput | SortOrder
    categories?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: teamsCountOrderByAggregateInput
    _avg?: teamsAvgOrderByAggregateInput
    _max?: teamsMaxOrderByAggregateInput
    _min?: teamsMinOrderByAggregateInput
    _sum?: teamsSumOrderByAggregateInput
  }

  export type teamsScalarWhereWithAggregatesInput = {
    AND?: teamsScalarWhereWithAggregatesInput | teamsScalarWhereWithAggregatesInput[]
    OR?: teamsScalarWhereWithAggregatesInput[]
    NOT?: teamsScalarWhereWithAggregatesInput | teamsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"teams"> | number
    teamName?: StringWithAggregatesFilter<"teams"> | string
    ownerId?: IntWithAggregatesFilter<"teams"> | number
    currency?: StringWithAggregatesFilter<"teams"> | string
    budget?: DecimalNullableWithAggregatesFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: DecimalNullableWithAggregatesFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: BoolNullableWithAggregatesFilter<"teams"> | boolean | null
    categories?: JsonWithAggregatesFilter<"teams">
    createdAt?: DateTimeNullableWithAggregatesFilter<"teams"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"teams"> | Date | string | null
  }

  export type transactionsWhereInput = {
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    id?: IntFilter<"transactions"> | number
    teamId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
    amount?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFilter<"transactions"> | $Enums.transaction_type
    categoryName?: StringNullableFilter<"transactions"> | string | null
    categoryIcon?: StringNullableFilter<"transactions"> | string | null
    description?: StringNullableFilter<"transactions"> | string | null
    transactionDate?: DateTimeNullableFilter<"transactions"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"transactions"> | Date | string | null
    changeRequests?: ChangeRequestsListRelationFilter
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type transactionsOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    categoryName?: SortOrderInput | SortOrder
    categoryIcon?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    transactionDate?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    changeRequests?: changeRequestsOrderByRelationAggregateInput
    teams?: teamsOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type transactionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    teamId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
    amount?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFilter<"transactions"> | $Enums.transaction_type
    categoryName?: StringNullableFilter<"transactions"> | string | null
    categoryIcon?: StringNullableFilter<"transactions"> | string | null
    description?: StringNullableFilter<"transactions"> | string | null
    transactionDate?: DateTimeNullableFilter<"transactions"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"transactions"> | Date | string | null
    changeRequests?: ChangeRequestsListRelationFilter
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type transactionsOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    categoryName?: SortOrderInput | SortOrder
    categoryIcon?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    transactionDate?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: transactionsCountOrderByAggregateInput
    _avg?: transactionsAvgOrderByAggregateInput
    _max?: transactionsMaxOrderByAggregateInput
    _min?: transactionsMinOrderByAggregateInput
    _sum?: transactionsSumOrderByAggregateInput
  }

  export type transactionsScalarWhereWithAggregatesInput = {
    AND?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    OR?: transactionsScalarWhereWithAggregatesInput[]
    NOT?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"transactions"> | number
    teamId?: IntWithAggregatesFilter<"transactions"> | number
    userId?: IntWithAggregatesFilter<"transactions"> | number
    amount?: DecimalWithAggregatesFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeWithAggregatesFilter<"transactions"> | $Enums.transaction_type
    categoryName?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    categoryIcon?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    description?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    transactionDate?: DateTimeNullableWithAggregatesFilter<"transactions"> | Date | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"transactions"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"transactions"> | Date | string | null
  }

  export type changeRequestsWhereInput = {
    AND?: changeRequestsWhereInput | changeRequestsWhereInput[]
    OR?: changeRequestsWhereInput[]
    NOT?: changeRequestsWhereInput | changeRequestsWhereInput[]
    id?: IntFilter<"changeRequests"> | number
    requesterId?: IntFilter<"changeRequests"> | number
    targetTransactionId?: IntFilter<"changeRequests"> | number
    type?: StringFilter<"changeRequests"> | string
    status?: Enumchange_request_statusFilter<"changeRequests"> | $Enums.change_request_status
    reason?: StringFilter<"changeRequests"> | string
    createdAt?: DateTimeNullableFilter<"changeRequests"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"changeRequests"> | Date | string | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: XOR<TransactionsScalarRelationFilter, transactionsWhereInput>
  }

  export type changeRequestsOrderByWithRelationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    targetTransactionId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
    transactions?: transactionsOrderByWithRelationInput
  }

  export type changeRequestsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: changeRequestsWhereInput | changeRequestsWhereInput[]
    OR?: changeRequestsWhereInput[]
    NOT?: changeRequestsWhereInput | changeRequestsWhereInput[]
    requesterId?: IntFilter<"changeRequests"> | number
    targetTransactionId?: IntFilter<"changeRequests"> | number
    type?: StringFilter<"changeRequests"> | string
    status?: Enumchange_request_statusFilter<"changeRequests"> | $Enums.change_request_status
    reason?: StringFilter<"changeRequests"> | string
    createdAt?: DateTimeNullableFilter<"changeRequests"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"changeRequests"> | Date | string | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: XOR<TransactionsScalarRelationFilter, transactionsWhereInput>
  }, "id">

  export type changeRequestsOrderByWithAggregationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    targetTransactionId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: changeRequestsCountOrderByAggregateInput
    _avg?: changeRequestsAvgOrderByAggregateInput
    _max?: changeRequestsMaxOrderByAggregateInput
    _min?: changeRequestsMinOrderByAggregateInput
    _sum?: changeRequestsSumOrderByAggregateInput
  }

  export type changeRequestsScalarWhereWithAggregatesInput = {
    AND?: changeRequestsScalarWhereWithAggregatesInput | changeRequestsScalarWhereWithAggregatesInput[]
    OR?: changeRequestsScalarWhereWithAggregatesInput[]
    NOT?: changeRequestsScalarWhereWithAggregatesInput | changeRequestsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"changeRequests"> | number
    requesterId?: IntWithAggregatesFilter<"changeRequests"> | number
    targetTransactionId?: IntWithAggregatesFilter<"changeRequests"> | number
    type?: StringWithAggregatesFilter<"changeRequests"> | string
    status?: Enumchange_request_statusWithAggregatesFilter<"changeRequests"> | $Enums.change_request_status
    reason?: StringWithAggregatesFilter<"changeRequests"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"changeRequests"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"changeRequests"> | Date | string | null
  }

  export type passwordResetsWhereInput = {
    AND?: passwordResetsWhereInput | passwordResetsWhereInput[]
    OR?: passwordResetsWhereInput[]
    NOT?: passwordResetsWhereInput | passwordResetsWhereInput[]
    id?: IntFilter<"passwordResets"> | number
    userId?: IntFilter<"passwordResets"> | number
    token?: StringFilter<"passwordResets"> | string
    expiresAt?: DateTimeFilter<"passwordResets"> | Date | string
    used?: BoolFilter<"passwordResets"> | boolean
    createdAt?: DateTimeNullableFilter<"passwordResets"> | Date | string | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type passwordResetsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type passwordResetsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: passwordResetsWhereInput | passwordResetsWhereInput[]
    OR?: passwordResetsWhereInput[]
    NOT?: passwordResetsWhereInput | passwordResetsWhereInput[]
    userId?: IntFilter<"passwordResets"> | number
    expiresAt?: DateTimeFilter<"passwordResets"> | Date | string
    used?: BoolFilter<"passwordResets"> | boolean
    createdAt?: DateTimeNullableFilter<"passwordResets"> | Date | string | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type passwordResetsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: passwordResetsCountOrderByAggregateInput
    _avg?: passwordResetsAvgOrderByAggregateInput
    _max?: passwordResetsMaxOrderByAggregateInput
    _min?: passwordResetsMinOrderByAggregateInput
    _sum?: passwordResetsSumOrderByAggregateInput
  }

  export type passwordResetsScalarWhereWithAggregatesInput = {
    AND?: passwordResetsScalarWhereWithAggregatesInput | passwordResetsScalarWhereWithAggregatesInput[]
    OR?: passwordResetsScalarWhereWithAggregatesInput[]
    NOT?: passwordResetsScalarWhereWithAggregatesInput | passwordResetsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"passwordResets"> | number
    userId?: IntWithAggregatesFilter<"passwordResets"> | number
    token?: StringWithAggregatesFilter<"passwordResets"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"passwordResets"> | Date | string
    used?: BoolWithAggregatesFilter<"passwordResets"> | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter<"passwordResets"> | Date | string | null
  }

  export type teamInvitationsWhereInput = {
    AND?: teamInvitationsWhereInput | teamInvitationsWhereInput[]
    OR?: teamInvitationsWhereInput[]
    NOT?: teamInvitationsWhereInput | teamInvitationsWhereInput[]
    id?: IntFilter<"teamInvitations"> | number
    token?: UuidFilter<"teamInvitations"> | string
    teamId?: IntFilter<"teamInvitations"> | number
    inviterId?: IntFilter<"teamInvitations"> | number
    inviteeEmail?: StringFilter<"teamInvitations"> | string
    status?: Enuminvitation_statusFilter<"teamInvitations"> | $Enums.invitation_status
    createdAt?: DateTimeNullableFilter<"teamInvitations"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"teamInvitations"> | Date | string | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
  }

  export type teamInvitationsOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    teamId?: SortOrder
    inviterId?: SortOrder
    inviteeEmail?: SortOrder
    status?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
    teams?: teamsOrderByWithRelationInput
  }

  export type teamInvitationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: teamInvitationsWhereInput | teamInvitationsWhereInput[]
    OR?: teamInvitationsWhereInput[]
    NOT?: teamInvitationsWhereInput | teamInvitationsWhereInput[]
    teamId?: IntFilter<"teamInvitations"> | number
    inviterId?: IntFilter<"teamInvitations"> | number
    inviteeEmail?: StringFilter<"teamInvitations"> | string
    status?: Enuminvitation_statusFilter<"teamInvitations"> | $Enums.invitation_status
    createdAt?: DateTimeNullableFilter<"teamInvitations"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"teamInvitations"> | Date | string | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
  }, "id" | "token">

  export type teamInvitationsOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    teamId?: SortOrder
    inviterId?: SortOrder
    inviteeEmail?: SortOrder
    status?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: teamInvitationsCountOrderByAggregateInput
    _avg?: teamInvitationsAvgOrderByAggregateInput
    _max?: teamInvitationsMaxOrderByAggregateInput
    _min?: teamInvitationsMinOrderByAggregateInput
    _sum?: teamInvitationsSumOrderByAggregateInput
  }

  export type teamInvitationsScalarWhereWithAggregatesInput = {
    AND?: teamInvitationsScalarWhereWithAggregatesInput | teamInvitationsScalarWhereWithAggregatesInput[]
    OR?: teamInvitationsScalarWhereWithAggregatesInput[]
    NOT?: teamInvitationsScalarWhereWithAggregatesInput | teamInvitationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"teamInvitations"> | number
    token?: UuidWithAggregatesFilter<"teamInvitations"> | string
    teamId?: IntWithAggregatesFilter<"teamInvitations"> | number
    inviterId?: IntWithAggregatesFilter<"teamInvitations"> | number
    inviteeEmail?: StringWithAggregatesFilter<"teamInvitations"> | string
    status?: Enuminvitation_statusWithAggregatesFilter<"teamInvitations"> | $Enums.invitation_status
    createdAt?: DateTimeNullableWithAggregatesFilter<"teamInvitations"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"teamInvitations"> | Date | string | null
  }

  export type teamMembersWhereInput = {
    AND?: teamMembersWhereInput | teamMembersWhereInput[]
    OR?: teamMembersWhereInput[]
    NOT?: teamMembersWhereInput | teamMembersWhereInput[]
    teamId?: IntFilter<"teamMembers"> | number
    userId?: IntFilter<"teamMembers"> | number
    role?: StringNullableFilter<"teamMembers"> | string | null
    joinedAt?: DateTimeNullableFilter<"teamMembers"> | Date | string | null
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type teamMembersOrderByWithRelationInput = {
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrderInput | SortOrder
    joinedAt?: SortOrderInput | SortOrder
    teams?: teamsOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type teamMembersWhereUniqueInput = Prisma.AtLeast<{
    teamId_userId?: teamMembersTeamIdUserIdCompoundUniqueInput
    AND?: teamMembersWhereInput | teamMembersWhereInput[]
    OR?: teamMembersWhereInput[]
    NOT?: teamMembersWhereInput | teamMembersWhereInput[]
    teamId?: IntFilter<"teamMembers"> | number
    userId?: IntFilter<"teamMembers"> | number
    role?: StringNullableFilter<"teamMembers"> | string | null
    joinedAt?: DateTimeNullableFilter<"teamMembers"> | Date | string | null
    teams?: XOR<TeamsScalarRelationFilter, teamsWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "teamId_userId">

  export type teamMembersOrderByWithAggregationInput = {
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrderInput | SortOrder
    joinedAt?: SortOrderInput | SortOrder
    _count?: teamMembersCountOrderByAggregateInput
    _avg?: teamMembersAvgOrderByAggregateInput
    _max?: teamMembersMaxOrderByAggregateInput
    _min?: teamMembersMinOrderByAggregateInput
    _sum?: teamMembersSumOrderByAggregateInput
  }

  export type teamMembersScalarWhereWithAggregatesInput = {
    AND?: teamMembersScalarWhereWithAggregatesInput | teamMembersScalarWhereWithAggregatesInput[]
    OR?: teamMembersScalarWhereWithAggregatesInput[]
    NOT?: teamMembersScalarWhereWithAggregatesInput | teamMembersScalarWhereWithAggregatesInput[]
    teamId?: IntWithAggregatesFilter<"teamMembers"> | number
    userId?: IntWithAggregatesFilter<"teamMembers"> | number
    role?: StringNullableWithAggregatesFilter<"teamMembers"> | string | null
    joinedAt?: DateTimeNullableWithAggregatesFilter<"teamMembers"> | Date | string | null
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersCreateNestedManyWithoutUserInput
    teams?: teamsCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsUncheckedCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutUserInput
    teams?: teamsUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUpdateManyWithoutUserNestedInput
    teams?: teamsUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUncheckedUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutUserNestedInput
    teams?: teamsUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsCreateInput = {
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
    teams?: teamsCreateNestedOneWithoutNotificationsInput
    User: UserCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateInput = {
    id?: number
    userId: number
    teamId?: number | null
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
  }

  export type notificationsUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teams?: teamsUpdateOneWithoutNotificationsNestedInput
    User?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsCreateManyInput = {
    id?: number
    userId: number
    teamId?: number | null
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
  }

  export type notificationsUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamsCreateInput = {
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersCreateNestedManyWithoutTeamsInput
    User: UserCreateNestedOneWithoutTeamsInput
    transactions?: transactionsCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateInput = {
    id?: number
    teamName: string
    ownerId: number
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutTeamsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsUpdateInput = {
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUpdateManyWithoutTeamsNestedInput
    User?: UserUpdateOneRequiredWithoutTeamsNestedInput
    transactions?: transactionsUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutTeamsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type teamsCreateManyInput = {
    id?: number
    teamName: string
    ownerId: number
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type teamsUpdateManyMutationInput = {
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutTransactionsInput
    teams: teamsCreateNestedOneWithoutTransactionsInput
    User: UserCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateInput = {
    id?: number
    teamId: number
    userId: number
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactionsUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutTransactionsNestedInput
    teams?: teamsUpdateOneRequiredWithoutTransactionsNestedInput
    User?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactionsCreateManyInput = {
    id?: number
    teamId: number
    userId: number
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type transactionsUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type changeRequestsCreateInput = {
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    User: UserCreateNestedOneWithoutChangeRequestsInput
    transactions: transactionsCreateNestedOneWithoutChangeRequestsInput
  }

  export type changeRequestsUncheckedCreateInput = {
    id?: number
    requesterId: number
    targetTransactionId: number
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type changeRequestsUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutChangeRequestsNestedInput
    transactions?: transactionsUpdateOneRequiredWithoutChangeRequestsNestedInput
  }

  export type changeRequestsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    targetTransactionId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type changeRequestsCreateManyInput = {
    id?: number
    requesterId: number
    targetTransactionId: number
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type changeRequestsUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type changeRequestsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    targetTransactionId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type passwordResetsCreateInput = {
    token?: string
    expiresAt?: Date | string
    used?: boolean
    createdAt?: Date | string | null
    User: UserCreateNestedOneWithoutPasswordResetsInput
  }

  export type passwordResetsUncheckedCreateInput = {
    id?: number
    userId: number
    token?: string
    expiresAt?: Date | string
    used?: boolean
    createdAt?: Date | string | null
  }

  export type passwordResetsUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutPasswordResetsNestedInput
  }

  export type passwordResetsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type passwordResetsCreateManyInput = {
    id?: number
    userId: number
    token?: string
    expiresAt?: Date | string
    used?: boolean
    createdAt?: Date | string | null
  }

  export type passwordResetsUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type passwordResetsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamInvitationsCreateInput = {
    token?: string
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    User: UserCreateNestedOneWithoutTeamInvitationsInput
    teams: teamsCreateNestedOneWithoutTeamInvitationsInput
  }

  export type teamInvitationsUncheckedCreateInput = {
    id?: number
    token?: string
    teamId: number
    inviterId: number
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type teamInvitationsUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutTeamInvitationsNestedInput
    teams?: teamsUpdateOneRequiredWithoutTeamInvitationsNestedInput
  }

  export type teamInvitationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    inviterId?: IntFieldUpdateOperationsInput | number
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamInvitationsCreateManyInput = {
    id?: number
    token?: string
    teamId: number
    inviterId: number
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type teamInvitationsUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamInvitationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    inviterId?: IntFieldUpdateOperationsInput | number
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamMembersCreateInput = {
    role?: string | null
    joinedAt?: Date | string | null
    teams: teamsCreateNestedOneWithoutTeamMembersInput
    User: UserCreateNestedOneWithoutTeamMembersInput
  }

  export type teamMembersUncheckedCreateInput = {
    teamId: number
    userId: number
    role?: string | null
    joinedAt?: Date | string | null
  }

  export type teamMembersUpdateInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teams?: teamsUpdateOneRequiredWithoutTeamMembersNestedInput
    User?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type teamMembersUncheckedUpdateInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamMembersCreateManyInput = {
    teamId: number
    userId: number
    role?: string | null
    joinedAt?: Date | string | null
  }

  export type teamMembersUpdateManyMutationInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamMembersUncheckedUpdateManyInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ChangeRequestsListRelationFilter = {
    every?: changeRequestsWhereInput
    some?: changeRequestsWhereInput
    none?: changeRequestsWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: notificationsWhereInput
    some?: notificationsWhereInput
    none?: notificationsWhereInput
  }

  export type PasswordResetsListRelationFilter = {
    every?: passwordResetsWhereInput
    some?: passwordResetsWhereInput
    none?: passwordResetsWhereInput
  }

  export type TeamInvitationsListRelationFilter = {
    every?: teamInvitationsWhereInput
    some?: teamInvitationsWhereInput
    none?: teamInvitationsWhereInput
  }

  export type TeamMembersListRelationFilter = {
    every?: teamMembersWhereInput
    some?: teamMembersWhereInput
    none?: teamMembersWhereInput
  }

  export type TeamsListRelationFilter = {
    every?: teamsWhereInput
    some?: teamsWhereInput
    none?: teamsWhereInput
  }

  export type TransactionsListRelationFilter = {
    every?: transactionsWhereInput
    some?: transactionsWhereInput
    none?: transactionsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type changeRequestsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type passwordResetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type teamInvitationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type teamMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type teamsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transactionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type TeamsNullableScalarRelationFilter = {
    is?: teamsWhereInput | null
    isNot?: teamsWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type notificationsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    relatedResourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type notificationsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    relatedResourceId?: SortOrder
  }

  export type notificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    relatedResourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type notificationsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    relatedResourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type notificationsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    relatedResourceId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type teamsCountOrderByAggregateInput = {
    id?: SortOrder
    teamName?: SortOrder
    ownerId?: SortOrder
    currency?: SortOrder
    budget?: SortOrder
    incomeGoal?: SortOrder
    allowMemberViewReport?: SortOrder
    categories?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type teamsAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    budget?: SortOrder
    incomeGoal?: SortOrder
  }

  export type teamsMaxOrderByAggregateInput = {
    id?: SortOrder
    teamName?: SortOrder
    ownerId?: SortOrder
    currency?: SortOrder
    budget?: SortOrder
    incomeGoal?: SortOrder
    allowMemberViewReport?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type teamsMinOrderByAggregateInput = {
    id?: SortOrder
    teamName?: SortOrder
    ownerId?: SortOrder
    currency?: SortOrder
    budget?: SortOrder
    incomeGoal?: SortOrder
    allowMemberViewReport?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type teamsSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    budget?: SortOrder
    incomeGoal?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type Enumtransaction_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.transaction_type | Enumtransaction_typeFieldRefInput<$PrismaModel>
    in?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumtransaction_typeFilter<$PrismaModel> | $Enums.transaction_type
  }

  export type TeamsScalarRelationFilter = {
    is?: teamsWhereInput
    isNot?: teamsWhereInput
  }

  export type transactionsCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    categoryName?: SortOrder
    categoryIcon?: SortOrder
    description?: SortOrder
    transactionDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type transactionsAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type transactionsMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    categoryName?: SortOrder
    categoryIcon?: SortOrder
    description?: SortOrder
    transactionDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type transactionsMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    categoryName?: SortOrder
    categoryIcon?: SortOrder
    description?: SortOrder
    transactionDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type transactionsSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type Enumtransaction_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transaction_type | Enumtransaction_typeFieldRefInput<$PrismaModel>
    in?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumtransaction_typeWithAggregatesFilter<$PrismaModel> | $Enums.transaction_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransaction_typeFilter<$PrismaModel>
    _max?: NestedEnumtransaction_typeFilter<$PrismaModel>
  }

  export type Enumchange_request_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.change_request_status | Enumchange_request_statusFieldRefInput<$PrismaModel>
    in?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumchange_request_statusFilter<$PrismaModel> | $Enums.change_request_status
  }

  export type TransactionsScalarRelationFilter = {
    is?: transactionsWhereInput
    isNot?: transactionsWhereInput
  }

  export type changeRequestsCountOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    targetTransactionId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type changeRequestsAvgOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    targetTransactionId?: SortOrder
  }

  export type changeRequestsMaxOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    targetTransactionId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type changeRequestsMinOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    targetTransactionId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type changeRequestsSumOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    targetTransactionId?: SortOrder
  }

  export type Enumchange_request_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.change_request_status | Enumchange_request_statusFieldRefInput<$PrismaModel>
    in?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumchange_request_statusWithAggregatesFilter<$PrismaModel> | $Enums.change_request_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumchange_request_statusFilter<$PrismaModel>
    _max?: NestedEnumchange_request_statusFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type passwordResetsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type passwordResetsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type passwordResetsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type passwordResetsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type passwordResetsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type Enuminvitation_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.invitation_status | Enuminvitation_statusFieldRefInput<$PrismaModel>
    in?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    not?: NestedEnuminvitation_statusFilter<$PrismaModel> | $Enums.invitation_status
  }

  export type teamInvitationsCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    teamId?: SortOrder
    inviterId?: SortOrder
    inviteeEmail?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type teamInvitationsAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    inviterId?: SortOrder
  }

  export type teamInvitationsMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    teamId?: SortOrder
    inviterId?: SortOrder
    inviteeEmail?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type teamInvitationsMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    teamId?: SortOrder
    inviterId?: SortOrder
    inviteeEmail?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type teamInvitationsSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    inviterId?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Enuminvitation_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.invitation_status | Enuminvitation_statusFieldRefInput<$PrismaModel>
    in?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    not?: NestedEnuminvitation_statusWithAggregatesFilter<$PrismaModel> | $Enums.invitation_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnuminvitation_statusFilter<$PrismaModel>
    _max?: NestedEnuminvitation_statusFilter<$PrismaModel>
  }

  export type teamMembersTeamIdUserIdCompoundUniqueInput = {
    teamId: number
    userId: number
  }

  export type teamMembersCountOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type teamMembersAvgOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
  }

  export type teamMembersMaxOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type teamMembersMinOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type teamMembersSumOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
  }

  export type changeRequestsCreateNestedManyWithoutUserInput = {
    create?: XOR<changeRequestsCreateWithoutUserInput, changeRequestsUncheckedCreateWithoutUserInput> | changeRequestsCreateWithoutUserInput[] | changeRequestsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutUserInput | changeRequestsCreateOrConnectWithoutUserInput[]
    createMany?: changeRequestsCreateManyUserInputEnvelope
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
  }

  export type notificationsCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type passwordResetsCreateNestedManyWithoutUserInput = {
    create?: XOR<passwordResetsCreateWithoutUserInput, passwordResetsUncheckedCreateWithoutUserInput> | passwordResetsCreateWithoutUserInput[] | passwordResetsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordResetsCreateOrConnectWithoutUserInput | passwordResetsCreateOrConnectWithoutUserInput[]
    createMany?: passwordResetsCreateManyUserInputEnvelope
    connect?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
  }

  export type teamInvitationsCreateNestedManyWithoutUserInput = {
    create?: XOR<teamInvitationsCreateWithoutUserInput, teamInvitationsUncheckedCreateWithoutUserInput> | teamInvitationsCreateWithoutUserInput[] | teamInvitationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutUserInput | teamInvitationsCreateOrConnectWithoutUserInput[]
    createMany?: teamInvitationsCreateManyUserInputEnvelope
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
  }

  export type teamMembersCreateNestedManyWithoutUserInput = {
    create?: XOR<teamMembersCreateWithoutUserInput, teamMembersUncheckedCreateWithoutUserInput> | teamMembersCreateWithoutUserInput[] | teamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutUserInput | teamMembersCreateOrConnectWithoutUserInput[]
    createMany?: teamMembersCreateManyUserInputEnvelope
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
  }

  export type teamsCreateNestedManyWithoutUserInput = {
    create?: XOR<teamsCreateWithoutUserInput, teamsUncheckedCreateWithoutUserInput> | teamsCreateWithoutUserInput[] | teamsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamsCreateOrConnectWithoutUserInput | teamsCreateOrConnectWithoutUserInput[]
    createMany?: teamsCreateManyUserInputEnvelope
    connect?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
  }

  export type transactionsCreateNestedManyWithoutUserInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type changeRequestsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<changeRequestsCreateWithoutUserInput, changeRequestsUncheckedCreateWithoutUserInput> | changeRequestsCreateWithoutUserInput[] | changeRequestsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutUserInput | changeRequestsCreateOrConnectWithoutUserInput[]
    createMany?: changeRequestsCreateManyUserInputEnvelope
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type passwordResetsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<passwordResetsCreateWithoutUserInput, passwordResetsUncheckedCreateWithoutUserInput> | passwordResetsCreateWithoutUserInput[] | passwordResetsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordResetsCreateOrConnectWithoutUserInput | passwordResetsCreateOrConnectWithoutUserInput[]
    createMany?: passwordResetsCreateManyUserInputEnvelope
    connect?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
  }

  export type teamInvitationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<teamInvitationsCreateWithoutUserInput, teamInvitationsUncheckedCreateWithoutUserInput> | teamInvitationsCreateWithoutUserInput[] | teamInvitationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutUserInput | teamInvitationsCreateOrConnectWithoutUserInput[]
    createMany?: teamInvitationsCreateManyUserInputEnvelope
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
  }

  export type teamMembersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<teamMembersCreateWithoutUserInput, teamMembersUncheckedCreateWithoutUserInput> | teamMembersCreateWithoutUserInput[] | teamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutUserInput | teamMembersCreateOrConnectWithoutUserInput[]
    createMany?: teamMembersCreateManyUserInputEnvelope
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
  }

  export type teamsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<teamsCreateWithoutUserInput, teamsUncheckedCreateWithoutUserInput> | teamsCreateWithoutUserInput[] | teamsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamsCreateOrConnectWithoutUserInput | teamsCreateOrConnectWithoutUserInput[]
    createMany?: teamsCreateManyUserInputEnvelope
    connect?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type changeRequestsUpdateManyWithoutUserNestedInput = {
    create?: XOR<changeRequestsCreateWithoutUserInput, changeRequestsUncheckedCreateWithoutUserInput> | changeRequestsCreateWithoutUserInput[] | changeRequestsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutUserInput | changeRequestsCreateOrConnectWithoutUserInput[]
    upsert?: changeRequestsUpsertWithWhereUniqueWithoutUserInput | changeRequestsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: changeRequestsCreateManyUserInputEnvelope
    set?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    disconnect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    delete?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    update?: changeRequestsUpdateWithWhereUniqueWithoutUserInput | changeRequestsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: changeRequestsUpdateManyWithWhereWithoutUserInput | changeRequestsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: changeRequestsScalarWhereInput | changeRequestsScalarWhereInput[]
  }

  export type notificationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type passwordResetsUpdateManyWithoutUserNestedInput = {
    create?: XOR<passwordResetsCreateWithoutUserInput, passwordResetsUncheckedCreateWithoutUserInput> | passwordResetsCreateWithoutUserInput[] | passwordResetsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordResetsCreateOrConnectWithoutUserInput | passwordResetsCreateOrConnectWithoutUserInput[]
    upsert?: passwordResetsUpsertWithWhereUniqueWithoutUserInput | passwordResetsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: passwordResetsCreateManyUserInputEnvelope
    set?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    disconnect?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    delete?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    connect?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    update?: passwordResetsUpdateWithWhereUniqueWithoutUserInput | passwordResetsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: passwordResetsUpdateManyWithWhereWithoutUserInput | passwordResetsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: passwordResetsScalarWhereInput | passwordResetsScalarWhereInput[]
  }

  export type teamInvitationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<teamInvitationsCreateWithoutUserInput, teamInvitationsUncheckedCreateWithoutUserInput> | teamInvitationsCreateWithoutUserInput[] | teamInvitationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutUserInput | teamInvitationsCreateOrConnectWithoutUserInput[]
    upsert?: teamInvitationsUpsertWithWhereUniqueWithoutUserInput | teamInvitationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: teamInvitationsCreateManyUserInputEnvelope
    set?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    disconnect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    delete?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    update?: teamInvitationsUpdateWithWhereUniqueWithoutUserInput | teamInvitationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: teamInvitationsUpdateManyWithWhereWithoutUserInput | teamInvitationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: teamInvitationsScalarWhereInput | teamInvitationsScalarWhereInput[]
  }

  export type teamMembersUpdateManyWithoutUserNestedInput = {
    create?: XOR<teamMembersCreateWithoutUserInput, teamMembersUncheckedCreateWithoutUserInput> | teamMembersCreateWithoutUserInput[] | teamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutUserInput | teamMembersCreateOrConnectWithoutUserInput[]
    upsert?: teamMembersUpsertWithWhereUniqueWithoutUserInput | teamMembersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: teamMembersCreateManyUserInputEnvelope
    set?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    disconnect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    delete?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    update?: teamMembersUpdateWithWhereUniqueWithoutUserInput | teamMembersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: teamMembersUpdateManyWithWhereWithoutUserInput | teamMembersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: teamMembersScalarWhereInput | teamMembersScalarWhereInput[]
  }

  export type teamsUpdateManyWithoutUserNestedInput = {
    create?: XOR<teamsCreateWithoutUserInput, teamsUncheckedCreateWithoutUserInput> | teamsCreateWithoutUserInput[] | teamsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamsCreateOrConnectWithoutUserInput | teamsCreateOrConnectWithoutUserInput[]
    upsert?: teamsUpsertWithWhereUniqueWithoutUserInput | teamsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: teamsCreateManyUserInputEnvelope
    set?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    disconnect?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    delete?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    connect?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    update?: teamsUpdateWithWhereUniqueWithoutUserInput | teamsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: teamsUpdateManyWithWhereWithoutUserInput | teamsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: teamsScalarWhereInput | teamsScalarWhereInput[]
  }

  export type transactionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutUserInput | transactionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutUserInput | transactionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutUserInput | transactionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type changeRequestsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<changeRequestsCreateWithoutUserInput, changeRequestsUncheckedCreateWithoutUserInput> | changeRequestsCreateWithoutUserInput[] | changeRequestsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutUserInput | changeRequestsCreateOrConnectWithoutUserInput[]
    upsert?: changeRequestsUpsertWithWhereUniqueWithoutUserInput | changeRequestsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: changeRequestsCreateManyUserInputEnvelope
    set?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    disconnect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    delete?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    update?: changeRequestsUpdateWithWhereUniqueWithoutUserInput | changeRequestsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: changeRequestsUpdateManyWithWhereWithoutUserInput | changeRequestsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: changeRequestsScalarWhereInput | changeRequestsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type passwordResetsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<passwordResetsCreateWithoutUserInput, passwordResetsUncheckedCreateWithoutUserInput> | passwordResetsCreateWithoutUserInput[] | passwordResetsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: passwordResetsCreateOrConnectWithoutUserInput | passwordResetsCreateOrConnectWithoutUserInput[]
    upsert?: passwordResetsUpsertWithWhereUniqueWithoutUserInput | passwordResetsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: passwordResetsCreateManyUserInputEnvelope
    set?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    disconnect?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    delete?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    connect?: passwordResetsWhereUniqueInput | passwordResetsWhereUniqueInput[]
    update?: passwordResetsUpdateWithWhereUniqueWithoutUserInput | passwordResetsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: passwordResetsUpdateManyWithWhereWithoutUserInput | passwordResetsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: passwordResetsScalarWhereInput | passwordResetsScalarWhereInput[]
  }

  export type teamInvitationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<teamInvitationsCreateWithoutUserInput, teamInvitationsUncheckedCreateWithoutUserInput> | teamInvitationsCreateWithoutUserInput[] | teamInvitationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutUserInput | teamInvitationsCreateOrConnectWithoutUserInput[]
    upsert?: teamInvitationsUpsertWithWhereUniqueWithoutUserInput | teamInvitationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: teamInvitationsCreateManyUserInputEnvelope
    set?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    disconnect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    delete?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    update?: teamInvitationsUpdateWithWhereUniqueWithoutUserInput | teamInvitationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: teamInvitationsUpdateManyWithWhereWithoutUserInput | teamInvitationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: teamInvitationsScalarWhereInput | teamInvitationsScalarWhereInput[]
  }

  export type teamMembersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<teamMembersCreateWithoutUserInput, teamMembersUncheckedCreateWithoutUserInput> | teamMembersCreateWithoutUserInput[] | teamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutUserInput | teamMembersCreateOrConnectWithoutUserInput[]
    upsert?: teamMembersUpsertWithWhereUniqueWithoutUserInput | teamMembersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: teamMembersCreateManyUserInputEnvelope
    set?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    disconnect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    delete?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    update?: teamMembersUpdateWithWhereUniqueWithoutUserInput | teamMembersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: teamMembersUpdateManyWithWhereWithoutUserInput | teamMembersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: teamMembersScalarWhereInput | teamMembersScalarWhereInput[]
  }

  export type teamsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<teamsCreateWithoutUserInput, teamsUncheckedCreateWithoutUserInput> | teamsCreateWithoutUserInput[] | teamsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: teamsCreateOrConnectWithoutUserInput | teamsCreateOrConnectWithoutUserInput[]
    upsert?: teamsUpsertWithWhereUniqueWithoutUserInput | teamsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: teamsCreateManyUserInputEnvelope
    set?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    disconnect?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    delete?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    connect?: teamsWhereUniqueInput | teamsWhereUniqueInput[]
    update?: teamsUpdateWithWhereUniqueWithoutUserInput | teamsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: teamsUpdateManyWithWhereWithoutUserInput | teamsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: teamsScalarWhereInput | teamsScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutUserInput | transactionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutUserInput | transactionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutUserInput | transactionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type teamsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<teamsCreateWithoutNotificationsInput, teamsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutNotificationsInput
    connect?: teamsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type teamsUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<teamsCreateWithoutNotificationsInput, teamsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutNotificationsInput
    upsert?: teamsUpsertWithoutNotificationsInput
    disconnect?: teamsWhereInput | boolean
    delete?: teamsWhereInput | boolean
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutNotificationsInput, teamsUpdateWithoutNotificationsInput>, teamsUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type notificationsCreateNestedManyWithoutTeamsInput = {
    create?: XOR<notificationsCreateWithoutTeamsInput, notificationsUncheckedCreateWithoutTeamsInput> | notificationsCreateWithoutTeamsInput[] | notificationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutTeamsInput | notificationsCreateOrConnectWithoutTeamsInput[]
    createMany?: notificationsCreateManyTeamsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type teamInvitationsCreateNestedManyWithoutTeamsInput = {
    create?: XOR<teamInvitationsCreateWithoutTeamsInput, teamInvitationsUncheckedCreateWithoutTeamsInput> | teamInvitationsCreateWithoutTeamsInput[] | teamInvitationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutTeamsInput | teamInvitationsCreateOrConnectWithoutTeamsInput[]
    createMany?: teamInvitationsCreateManyTeamsInputEnvelope
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
  }

  export type teamMembersCreateNestedManyWithoutTeamsInput = {
    create?: XOR<teamMembersCreateWithoutTeamsInput, teamMembersUncheckedCreateWithoutTeamsInput> | teamMembersCreateWithoutTeamsInput[] | teamMembersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutTeamsInput | teamMembersCreateOrConnectWithoutTeamsInput[]
    createMany?: teamMembersCreateManyTeamsInputEnvelope
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutTeamsInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    connect?: UserWhereUniqueInput
  }

  export type transactionsCreateNestedManyWithoutTeamsInput = {
    create?: XOR<transactionsCreateWithoutTeamsInput, transactionsUncheckedCreateWithoutTeamsInput> | transactionsCreateWithoutTeamsInput[] | transactionsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutTeamsInput | transactionsCreateOrConnectWithoutTeamsInput[]
    createMany?: transactionsCreateManyTeamsInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<notificationsCreateWithoutTeamsInput, notificationsUncheckedCreateWithoutTeamsInput> | notificationsCreateWithoutTeamsInput[] | notificationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutTeamsInput | notificationsCreateOrConnectWithoutTeamsInput[]
    createMany?: notificationsCreateManyTeamsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type teamInvitationsUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<teamInvitationsCreateWithoutTeamsInput, teamInvitationsUncheckedCreateWithoutTeamsInput> | teamInvitationsCreateWithoutTeamsInput[] | teamInvitationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutTeamsInput | teamInvitationsCreateOrConnectWithoutTeamsInput[]
    createMany?: teamInvitationsCreateManyTeamsInputEnvelope
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
  }

  export type teamMembersUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<teamMembersCreateWithoutTeamsInput, teamMembersUncheckedCreateWithoutTeamsInput> | teamMembersCreateWithoutTeamsInput[] | teamMembersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutTeamsInput | teamMembersCreateOrConnectWithoutTeamsInput[]
    createMany?: teamMembersCreateManyTeamsInputEnvelope
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<transactionsCreateWithoutTeamsInput, transactionsUncheckedCreateWithoutTeamsInput> | transactionsCreateWithoutTeamsInput[] | transactionsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutTeamsInput | transactionsCreateOrConnectWithoutTeamsInput[]
    createMany?: transactionsCreateManyTeamsInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type notificationsUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<notificationsCreateWithoutTeamsInput, notificationsUncheckedCreateWithoutTeamsInput> | notificationsCreateWithoutTeamsInput[] | notificationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutTeamsInput | notificationsCreateOrConnectWithoutTeamsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutTeamsInput | notificationsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: notificationsCreateManyTeamsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutTeamsInput | notificationsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutTeamsInput | notificationsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type teamInvitationsUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<teamInvitationsCreateWithoutTeamsInput, teamInvitationsUncheckedCreateWithoutTeamsInput> | teamInvitationsCreateWithoutTeamsInput[] | teamInvitationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutTeamsInput | teamInvitationsCreateOrConnectWithoutTeamsInput[]
    upsert?: teamInvitationsUpsertWithWhereUniqueWithoutTeamsInput | teamInvitationsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: teamInvitationsCreateManyTeamsInputEnvelope
    set?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    disconnect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    delete?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    update?: teamInvitationsUpdateWithWhereUniqueWithoutTeamsInput | teamInvitationsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: teamInvitationsUpdateManyWithWhereWithoutTeamsInput | teamInvitationsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: teamInvitationsScalarWhereInput | teamInvitationsScalarWhereInput[]
  }

  export type teamMembersUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<teamMembersCreateWithoutTeamsInput, teamMembersUncheckedCreateWithoutTeamsInput> | teamMembersCreateWithoutTeamsInput[] | teamMembersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutTeamsInput | teamMembersCreateOrConnectWithoutTeamsInput[]
    upsert?: teamMembersUpsertWithWhereUniqueWithoutTeamsInput | teamMembersUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: teamMembersCreateManyTeamsInputEnvelope
    set?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    disconnect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    delete?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    update?: teamMembersUpdateWithWhereUniqueWithoutTeamsInput | teamMembersUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: teamMembersUpdateManyWithWhereWithoutTeamsInput | teamMembersUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: teamMembersScalarWhereInput | teamMembersScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    upsert?: UserUpsertWithoutTeamsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamsInput, UserUpdateWithoutTeamsInput>, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type transactionsUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<transactionsCreateWithoutTeamsInput, transactionsUncheckedCreateWithoutTeamsInput> | transactionsCreateWithoutTeamsInput[] | transactionsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutTeamsInput | transactionsCreateOrConnectWithoutTeamsInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutTeamsInput | transactionsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: transactionsCreateManyTeamsInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutTeamsInput | transactionsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutTeamsInput | transactionsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<notificationsCreateWithoutTeamsInput, notificationsUncheckedCreateWithoutTeamsInput> | notificationsCreateWithoutTeamsInput[] | notificationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutTeamsInput | notificationsCreateOrConnectWithoutTeamsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutTeamsInput | notificationsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: notificationsCreateManyTeamsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutTeamsInput | notificationsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutTeamsInput | notificationsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type teamInvitationsUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<teamInvitationsCreateWithoutTeamsInput, teamInvitationsUncheckedCreateWithoutTeamsInput> | teamInvitationsCreateWithoutTeamsInput[] | teamInvitationsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamInvitationsCreateOrConnectWithoutTeamsInput | teamInvitationsCreateOrConnectWithoutTeamsInput[]
    upsert?: teamInvitationsUpsertWithWhereUniqueWithoutTeamsInput | teamInvitationsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: teamInvitationsCreateManyTeamsInputEnvelope
    set?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    disconnect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    delete?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    connect?: teamInvitationsWhereUniqueInput | teamInvitationsWhereUniqueInput[]
    update?: teamInvitationsUpdateWithWhereUniqueWithoutTeamsInput | teamInvitationsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: teamInvitationsUpdateManyWithWhereWithoutTeamsInput | teamInvitationsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: teamInvitationsScalarWhereInput | teamInvitationsScalarWhereInput[]
  }

  export type teamMembersUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<teamMembersCreateWithoutTeamsInput, teamMembersUncheckedCreateWithoutTeamsInput> | teamMembersCreateWithoutTeamsInput[] | teamMembersUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: teamMembersCreateOrConnectWithoutTeamsInput | teamMembersCreateOrConnectWithoutTeamsInput[]
    upsert?: teamMembersUpsertWithWhereUniqueWithoutTeamsInput | teamMembersUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: teamMembersCreateManyTeamsInputEnvelope
    set?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    disconnect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    delete?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    connect?: teamMembersWhereUniqueInput | teamMembersWhereUniqueInput[]
    update?: teamMembersUpdateWithWhereUniqueWithoutTeamsInput | teamMembersUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: teamMembersUpdateManyWithWhereWithoutTeamsInput | teamMembersUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: teamMembersScalarWhereInput | teamMembersScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<transactionsCreateWithoutTeamsInput, transactionsUncheckedCreateWithoutTeamsInput> | transactionsCreateWithoutTeamsInput[] | transactionsUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutTeamsInput | transactionsCreateOrConnectWithoutTeamsInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutTeamsInput | transactionsUpsertWithWhereUniqueWithoutTeamsInput[]
    createMany?: transactionsCreateManyTeamsInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutTeamsInput | transactionsUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutTeamsInput | transactionsUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type changeRequestsCreateNestedManyWithoutTransactionsInput = {
    create?: XOR<changeRequestsCreateWithoutTransactionsInput, changeRequestsUncheckedCreateWithoutTransactionsInput> | changeRequestsCreateWithoutTransactionsInput[] | changeRequestsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutTransactionsInput | changeRequestsCreateOrConnectWithoutTransactionsInput[]
    createMany?: changeRequestsCreateManyTransactionsInputEnvelope
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
  }

  export type teamsCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<teamsCreateWithoutTransactionsInput, teamsUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTransactionsInput
    connect?: teamsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type changeRequestsUncheckedCreateNestedManyWithoutTransactionsInput = {
    create?: XOR<changeRequestsCreateWithoutTransactionsInput, changeRequestsUncheckedCreateWithoutTransactionsInput> | changeRequestsCreateWithoutTransactionsInput[] | changeRequestsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutTransactionsInput | changeRequestsCreateOrConnectWithoutTransactionsInput[]
    createMany?: changeRequestsCreateManyTransactionsInputEnvelope
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type Enumtransaction_typeFieldUpdateOperationsInput = {
    set?: $Enums.transaction_type
  }

  export type changeRequestsUpdateManyWithoutTransactionsNestedInput = {
    create?: XOR<changeRequestsCreateWithoutTransactionsInput, changeRequestsUncheckedCreateWithoutTransactionsInput> | changeRequestsCreateWithoutTransactionsInput[] | changeRequestsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutTransactionsInput | changeRequestsCreateOrConnectWithoutTransactionsInput[]
    upsert?: changeRequestsUpsertWithWhereUniqueWithoutTransactionsInput | changeRequestsUpsertWithWhereUniqueWithoutTransactionsInput[]
    createMany?: changeRequestsCreateManyTransactionsInputEnvelope
    set?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    disconnect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    delete?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    update?: changeRequestsUpdateWithWhereUniqueWithoutTransactionsInput | changeRequestsUpdateWithWhereUniqueWithoutTransactionsInput[]
    updateMany?: changeRequestsUpdateManyWithWhereWithoutTransactionsInput | changeRequestsUpdateManyWithWhereWithoutTransactionsInput[]
    deleteMany?: changeRequestsScalarWhereInput | changeRequestsScalarWhereInput[]
  }

  export type teamsUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<teamsCreateWithoutTransactionsInput, teamsUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTransactionsInput
    upsert?: teamsUpsertWithoutTransactionsInput
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutTransactionsInput, teamsUpdateWithoutTransactionsInput>, teamsUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type changeRequestsUncheckedUpdateManyWithoutTransactionsNestedInput = {
    create?: XOR<changeRequestsCreateWithoutTransactionsInput, changeRequestsUncheckedCreateWithoutTransactionsInput> | changeRequestsCreateWithoutTransactionsInput[] | changeRequestsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: changeRequestsCreateOrConnectWithoutTransactionsInput | changeRequestsCreateOrConnectWithoutTransactionsInput[]
    upsert?: changeRequestsUpsertWithWhereUniqueWithoutTransactionsInput | changeRequestsUpsertWithWhereUniqueWithoutTransactionsInput[]
    createMany?: changeRequestsCreateManyTransactionsInputEnvelope
    set?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    disconnect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    delete?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    connect?: changeRequestsWhereUniqueInput | changeRequestsWhereUniqueInput[]
    update?: changeRequestsUpdateWithWhereUniqueWithoutTransactionsInput | changeRequestsUpdateWithWhereUniqueWithoutTransactionsInput[]
    updateMany?: changeRequestsUpdateManyWithWhereWithoutTransactionsInput | changeRequestsUpdateManyWithWhereWithoutTransactionsInput[]
    deleteMany?: changeRequestsScalarWhereInput | changeRequestsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChangeRequestsInput = {
    create?: XOR<UserCreateWithoutChangeRequestsInput, UserUncheckedCreateWithoutChangeRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangeRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type transactionsCreateNestedOneWithoutChangeRequestsInput = {
    create?: XOR<transactionsCreateWithoutChangeRequestsInput, transactionsUncheckedCreateWithoutChangeRequestsInput>
    connectOrCreate?: transactionsCreateOrConnectWithoutChangeRequestsInput
    connect?: transactionsWhereUniqueInput
  }

  export type Enumchange_request_statusFieldUpdateOperationsInput = {
    set?: $Enums.change_request_status
  }

  export type UserUpdateOneRequiredWithoutChangeRequestsNestedInput = {
    create?: XOR<UserCreateWithoutChangeRequestsInput, UserUncheckedCreateWithoutChangeRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangeRequestsInput
    upsert?: UserUpsertWithoutChangeRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChangeRequestsInput, UserUpdateWithoutChangeRequestsInput>, UserUncheckedUpdateWithoutChangeRequestsInput>
  }

  export type transactionsUpdateOneRequiredWithoutChangeRequestsNestedInput = {
    create?: XOR<transactionsCreateWithoutChangeRequestsInput, transactionsUncheckedCreateWithoutChangeRequestsInput>
    connectOrCreate?: transactionsCreateOrConnectWithoutChangeRequestsInput
    upsert?: transactionsUpsertWithoutChangeRequestsInput
    connect?: transactionsWhereUniqueInput
    update?: XOR<XOR<transactionsUpdateToOneWithWhereWithoutChangeRequestsInput, transactionsUpdateWithoutChangeRequestsInput>, transactionsUncheckedUpdateWithoutChangeRequestsInput>
  }

  export type UserCreateNestedOneWithoutPasswordResetsInput = {
    create?: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutPasswordResetsNestedInput = {
    create?: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetsInput
    upsert?: UserUpsertWithoutPasswordResetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordResetsInput, UserUpdateWithoutPasswordResetsInput>, UserUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type UserCreateNestedOneWithoutTeamInvitationsInput = {
    create?: XOR<UserCreateWithoutTeamInvitationsInput, UserUncheckedCreateWithoutTeamInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type teamsCreateNestedOneWithoutTeamInvitationsInput = {
    create?: XOR<teamsCreateWithoutTeamInvitationsInput, teamsUncheckedCreateWithoutTeamInvitationsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTeamInvitationsInput
    connect?: teamsWhereUniqueInput
  }

  export type Enuminvitation_statusFieldUpdateOperationsInput = {
    set?: $Enums.invitation_status
  }

  export type UserUpdateOneRequiredWithoutTeamInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutTeamInvitationsInput, UserUncheckedCreateWithoutTeamInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamInvitationsInput
    upsert?: UserUpsertWithoutTeamInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamInvitationsInput, UserUpdateWithoutTeamInvitationsInput>, UserUncheckedUpdateWithoutTeamInvitationsInput>
  }

  export type teamsUpdateOneRequiredWithoutTeamInvitationsNestedInput = {
    create?: XOR<teamsCreateWithoutTeamInvitationsInput, teamsUncheckedCreateWithoutTeamInvitationsInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTeamInvitationsInput
    upsert?: teamsUpsertWithoutTeamInvitationsInput
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutTeamInvitationsInput, teamsUpdateWithoutTeamInvitationsInput>, teamsUncheckedUpdateWithoutTeamInvitationsInput>
  }

  export type teamsCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<teamsCreateWithoutTeamMembersInput, teamsUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTeamMembersInput
    connect?: teamsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
  }

  export type teamsUpdateOneRequiredWithoutTeamMembersNestedInput = {
    create?: XOR<teamsCreateWithoutTeamMembersInput, teamsUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: teamsCreateOrConnectWithoutTeamMembersInput
    upsert?: teamsUpsertWithoutTeamMembersInput
    connect?: teamsWhereUniqueInput
    update?: XOR<XOR<teamsUpdateToOneWithWhereWithoutTeamMembersInput, teamsUpdateWithoutTeamMembersInput>, teamsUncheckedUpdateWithoutTeamMembersInput>
  }

  export type UserUpdateOneRequiredWithoutTeamMembersNestedInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    upsert?: UserUpsertWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMembersInput, UserUpdateWithoutTeamMembersInput>, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumtransaction_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.transaction_type | Enumtransaction_typeFieldRefInput<$PrismaModel>
    in?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumtransaction_typeFilter<$PrismaModel> | $Enums.transaction_type
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumtransaction_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transaction_type | Enumtransaction_typeFieldRefInput<$PrismaModel>
    in?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.transaction_type[] | ListEnumtransaction_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumtransaction_typeWithAggregatesFilter<$PrismaModel> | $Enums.transaction_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransaction_typeFilter<$PrismaModel>
    _max?: NestedEnumtransaction_typeFilter<$PrismaModel>
  }

  export type NestedEnumchange_request_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.change_request_status | Enumchange_request_statusFieldRefInput<$PrismaModel>
    in?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumchange_request_statusFilter<$PrismaModel> | $Enums.change_request_status
  }

  export type NestedEnumchange_request_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.change_request_status | Enumchange_request_statusFieldRefInput<$PrismaModel>
    in?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.change_request_status[] | ListEnumchange_request_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumchange_request_statusWithAggregatesFilter<$PrismaModel> | $Enums.change_request_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumchange_request_statusFilter<$PrismaModel>
    _max?: NestedEnumchange_request_statusFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedEnuminvitation_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.invitation_status | Enuminvitation_statusFieldRefInput<$PrismaModel>
    in?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    not?: NestedEnuminvitation_statusFilter<$PrismaModel> | $Enums.invitation_status
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnuminvitation_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.invitation_status | Enuminvitation_statusFieldRefInput<$PrismaModel>
    in?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.invitation_status[] | ListEnuminvitation_statusFieldRefInput<$PrismaModel>
    not?: NestedEnuminvitation_statusWithAggregatesFilter<$PrismaModel> | $Enums.invitation_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnuminvitation_statusFilter<$PrismaModel>
    _max?: NestedEnuminvitation_statusFilter<$PrismaModel>
  }

  export type changeRequestsCreateWithoutUserInput = {
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    transactions: transactionsCreateNestedOneWithoutChangeRequestsInput
  }

  export type changeRequestsUncheckedCreateWithoutUserInput = {
    id?: number
    targetTransactionId: number
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type changeRequestsCreateOrConnectWithoutUserInput = {
    where: changeRequestsWhereUniqueInput
    create: XOR<changeRequestsCreateWithoutUserInput, changeRequestsUncheckedCreateWithoutUserInput>
  }

  export type changeRequestsCreateManyUserInputEnvelope = {
    data: changeRequestsCreateManyUserInput | changeRequestsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type notificationsCreateWithoutUserInput = {
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
    teams?: teamsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutUserInput = {
    id?: number
    teamId?: number | null
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
  }

  export type notificationsCreateOrConnectWithoutUserInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsCreateManyUserInputEnvelope = {
    data: notificationsCreateManyUserInput | notificationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type passwordResetsCreateWithoutUserInput = {
    token?: string
    expiresAt?: Date | string
    used?: boolean
    createdAt?: Date | string | null
  }

  export type passwordResetsUncheckedCreateWithoutUserInput = {
    id?: number
    token?: string
    expiresAt?: Date | string
    used?: boolean
    createdAt?: Date | string | null
  }

  export type passwordResetsCreateOrConnectWithoutUserInput = {
    where: passwordResetsWhereUniqueInput
    create: XOR<passwordResetsCreateWithoutUserInput, passwordResetsUncheckedCreateWithoutUserInput>
  }

  export type passwordResetsCreateManyUserInputEnvelope = {
    data: passwordResetsCreateManyUserInput | passwordResetsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type teamInvitationsCreateWithoutUserInput = {
    token?: string
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    teams: teamsCreateNestedOneWithoutTeamInvitationsInput
  }

  export type teamInvitationsUncheckedCreateWithoutUserInput = {
    id?: number
    token?: string
    teamId: number
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type teamInvitationsCreateOrConnectWithoutUserInput = {
    where: teamInvitationsWhereUniqueInput
    create: XOR<teamInvitationsCreateWithoutUserInput, teamInvitationsUncheckedCreateWithoutUserInput>
  }

  export type teamInvitationsCreateManyUserInputEnvelope = {
    data: teamInvitationsCreateManyUserInput | teamInvitationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type teamMembersCreateWithoutUserInput = {
    role?: string | null
    joinedAt?: Date | string | null
    teams: teamsCreateNestedOneWithoutTeamMembersInput
  }

  export type teamMembersUncheckedCreateWithoutUserInput = {
    teamId: number
    role?: string | null
    joinedAt?: Date | string | null
  }

  export type teamMembersCreateOrConnectWithoutUserInput = {
    where: teamMembersWhereUniqueInput
    create: XOR<teamMembersCreateWithoutUserInput, teamMembersUncheckedCreateWithoutUserInput>
  }

  export type teamMembersCreateManyUserInputEnvelope = {
    data: teamMembersCreateManyUserInput | teamMembersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type teamsCreateWithoutUserInput = {
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersCreateNestedManyWithoutTeamsInput
    transactions?: transactionsCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutUserInput = {
    id?: number
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutTeamsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutUserInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutUserInput, teamsUncheckedCreateWithoutUserInput>
  }

  export type teamsCreateManyUserInputEnvelope = {
    data: teamsCreateManyUserInput | teamsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type transactionsCreateWithoutUserInput = {
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutTransactionsInput
    teams: teamsCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutUserInput = {
    id?: number
    teamId: number
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactionsCreateOrConnectWithoutUserInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput>
  }

  export type transactionsCreateManyUserInputEnvelope = {
    data: transactionsCreateManyUserInput | transactionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type changeRequestsUpsertWithWhereUniqueWithoutUserInput = {
    where: changeRequestsWhereUniqueInput
    update: XOR<changeRequestsUpdateWithoutUserInput, changeRequestsUncheckedUpdateWithoutUserInput>
    create: XOR<changeRequestsCreateWithoutUserInput, changeRequestsUncheckedCreateWithoutUserInput>
  }

  export type changeRequestsUpdateWithWhereUniqueWithoutUserInput = {
    where: changeRequestsWhereUniqueInput
    data: XOR<changeRequestsUpdateWithoutUserInput, changeRequestsUncheckedUpdateWithoutUserInput>
  }

  export type changeRequestsUpdateManyWithWhereWithoutUserInput = {
    where: changeRequestsScalarWhereInput
    data: XOR<changeRequestsUpdateManyMutationInput, changeRequestsUncheckedUpdateManyWithoutUserInput>
  }

  export type changeRequestsScalarWhereInput = {
    AND?: changeRequestsScalarWhereInput | changeRequestsScalarWhereInput[]
    OR?: changeRequestsScalarWhereInput[]
    NOT?: changeRequestsScalarWhereInput | changeRequestsScalarWhereInput[]
    id?: IntFilter<"changeRequests"> | number
    requesterId?: IntFilter<"changeRequests"> | number
    targetTransactionId?: IntFilter<"changeRequests"> | number
    type?: StringFilter<"changeRequests"> | string
    status?: Enumchange_request_statusFilter<"changeRequests"> | $Enums.change_request_status
    reason?: StringFilter<"changeRequests"> | string
    createdAt?: DateTimeNullableFilter<"changeRequests"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"changeRequests"> | Date | string | null
  }

  export type notificationsUpsertWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
  }

  export type notificationsUpdateManyWithWhereWithoutUserInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutUserInput>
  }

  export type notificationsScalarWhereInput = {
    AND?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    OR?: notificationsScalarWhereInput[]
    NOT?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    id?: IntFilter<"notifications"> | number
    userId?: IntFilter<"notifications"> | number
    teamId?: IntNullableFilter<"notifications"> | number | null
    type?: StringFilter<"notifications"> | string
    message?: StringFilter<"notifications"> | string
    isRead?: BoolNullableFilter<"notifications"> | boolean | null
    relatedResourceId?: IntNullableFilter<"notifications"> | number | null
    createdAt?: DateTimeNullableFilter<"notifications"> | Date | string | null
  }

  export type passwordResetsUpsertWithWhereUniqueWithoutUserInput = {
    where: passwordResetsWhereUniqueInput
    update: XOR<passwordResetsUpdateWithoutUserInput, passwordResetsUncheckedUpdateWithoutUserInput>
    create: XOR<passwordResetsCreateWithoutUserInput, passwordResetsUncheckedCreateWithoutUserInput>
  }

  export type passwordResetsUpdateWithWhereUniqueWithoutUserInput = {
    where: passwordResetsWhereUniqueInput
    data: XOR<passwordResetsUpdateWithoutUserInput, passwordResetsUncheckedUpdateWithoutUserInput>
  }

  export type passwordResetsUpdateManyWithWhereWithoutUserInput = {
    where: passwordResetsScalarWhereInput
    data: XOR<passwordResetsUpdateManyMutationInput, passwordResetsUncheckedUpdateManyWithoutUserInput>
  }

  export type passwordResetsScalarWhereInput = {
    AND?: passwordResetsScalarWhereInput | passwordResetsScalarWhereInput[]
    OR?: passwordResetsScalarWhereInput[]
    NOT?: passwordResetsScalarWhereInput | passwordResetsScalarWhereInput[]
    id?: IntFilter<"passwordResets"> | number
    userId?: IntFilter<"passwordResets"> | number
    token?: StringFilter<"passwordResets"> | string
    expiresAt?: DateTimeFilter<"passwordResets"> | Date | string
    used?: BoolFilter<"passwordResets"> | boolean
    createdAt?: DateTimeNullableFilter<"passwordResets"> | Date | string | null
  }

  export type teamInvitationsUpsertWithWhereUniqueWithoutUserInput = {
    where: teamInvitationsWhereUniqueInput
    update: XOR<teamInvitationsUpdateWithoutUserInput, teamInvitationsUncheckedUpdateWithoutUserInput>
    create: XOR<teamInvitationsCreateWithoutUserInput, teamInvitationsUncheckedCreateWithoutUserInput>
  }

  export type teamInvitationsUpdateWithWhereUniqueWithoutUserInput = {
    where: teamInvitationsWhereUniqueInput
    data: XOR<teamInvitationsUpdateWithoutUserInput, teamInvitationsUncheckedUpdateWithoutUserInput>
  }

  export type teamInvitationsUpdateManyWithWhereWithoutUserInput = {
    where: teamInvitationsScalarWhereInput
    data: XOR<teamInvitationsUpdateManyMutationInput, teamInvitationsUncheckedUpdateManyWithoutUserInput>
  }

  export type teamInvitationsScalarWhereInput = {
    AND?: teamInvitationsScalarWhereInput | teamInvitationsScalarWhereInput[]
    OR?: teamInvitationsScalarWhereInput[]
    NOT?: teamInvitationsScalarWhereInput | teamInvitationsScalarWhereInput[]
    id?: IntFilter<"teamInvitations"> | number
    token?: UuidFilter<"teamInvitations"> | string
    teamId?: IntFilter<"teamInvitations"> | number
    inviterId?: IntFilter<"teamInvitations"> | number
    inviteeEmail?: StringFilter<"teamInvitations"> | string
    status?: Enuminvitation_statusFilter<"teamInvitations"> | $Enums.invitation_status
    createdAt?: DateTimeNullableFilter<"teamInvitations"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"teamInvitations"> | Date | string | null
  }

  export type teamMembersUpsertWithWhereUniqueWithoutUserInput = {
    where: teamMembersWhereUniqueInput
    update: XOR<teamMembersUpdateWithoutUserInput, teamMembersUncheckedUpdateWithoutUserInput>
    create: XOR<teamMembersCreateWithoutUserInput, teamMembersUncheckedCreateWithoutUserInput>
  }

  export type teamMembersUpdateWithWhereUniqueWithoutUserInput = {
    where: teamMembersWhereUniqueInput
    data: XOR<teamMembersUpdateWithoutUserInput, teamMembersUncheckedUpdateWithoutUserInput>
  }

  export type teamMembersUpdateManyWithWhereWithoutUserInput = {
    where: teamMembersScalarWhereInput
    data: XOR<teamMembersUpdateManyMutationInput, teamMembersUncheckedUpdateManyWithoutUserInput>
  }

  export type teamMembersScalarWhereInput = {
    AND?: teamMembersScalarWhereInput | teamMembersScalarWhereInput[]
    OR?: teamMembersScalarWhereInput[]
    NOT?: teamMembersScalarWhereInput | teamMembersScalarWhereInput[]
    teamId?: IntFilter<"teamMembers"> | number
    userId?: IntFilter<"teamMembers"> | number
    role?: StringNullableFilter<"teamMembers"> | string | null
    joinedAt?: DateTimeNullableFilter<"teamMembers"> | Date | string | null
  }

  export type teamsUpsertWithWhereUniqueWithoutUserInput = {
    where: teamsWhereUniqueInput
    update: XOR<teamsUpdateWithoutUserInput, teamsUncheckedUpdateWithoutUserInput>
    create: XOR<teamsCreateWithoutUserInput, teamsUncheckedCreateWithoutUserInput>
  }

  export type teamsUpdateWithWhereUniqueWithoutUserInput = {
    where: teamsWhereUniqueInput
    data: XOR<teamsUpdateWithoutUserInput, teamsUncheckedUpdateWithoutUserInput>
  }

  export type teamsUpdateManyWithWhereWithoutUserInput = {
    where: teamsScalarWhereInput
    data: XOR<teamsUpdateManyMutationInput, teamsUncheckedUpdateManyWithoutUserInput>
  }

  export type teamsScalarWhereInput = {
    AND?: teamsScalarWhereInput | teamsScalarWhereInput[]
    OR?: teamsScalarWhereInput[]
    NOT?: teamsScalarWhereInput | teamsScalarWhereInput[]
    id?: IntFilter<"teams"> | number
    teamName?: StringFilter<"teams"> | string
    ownerId?: IntFilter<"teams"> | number
    currency?: StringFilter<"teams"> | string
    budget?: DecimalNullableFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: DecimalNullableFilter<"teams"> | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: BoolNullableFilter<"teams"> | boolean | null
    categories?: JsonFilter<"teams">
    createdAt?: DateTimeNullableFilter<"teams"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"teams"> | Date | string | null
  }

  export type transactionsUpsertWithWhereUniqueWithoutUserInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutUserInput, transactionsUncheckedUpdateWithoutUserInput>
    create: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutUserInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutUserInput, transactionsUncheckedUpdateWithoutUserInput>
  }

  export type transactionsUpdateManyWithWhereWithoutUserInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutUserInput>
  }

  export type transactionsScalarWhereInput = {
    AND?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    OR?: transactionsScalarWhereInput[]
    NOT?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    id?: IntFilter<"transactions"> | number
    teamId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
    amount?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFilter<"transactions"> | $Enums.transaction_type
    categoryName?: StringNullableFilter<"transactions"> | string | null
    categoryIcon?: StringNullableFilter<"transactions"> | string | null
    description?: StringNullableFilter<"transactions"> | string | null
    transactionDate?: DateTimeNullableFilter<"transactions"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"transactions"> | Date | string | null
  }

  export type teamsCreateWithoutNotificationsInput = {
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    teamInvitations?: teamInvitationsCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersCreateNestedManyWithoutTeamsInput
    User: UserCreateNestedOneWithoutTeamsInput
    transactions?: transactionsCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutNotificationsInput = {
    id?: number
    teamName: string
    ownerId: number
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutTeamsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutNotificationsInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutNotificationsInput, teamsUncheckedCreateWithoutNotificationsInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersCreateNestedManyWithoutUserInput
    teams?: teamsCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsUncheckedCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutUserInput
    teams?: teamsUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type teamsUpsertWithoutNotificationsInput = {
    update: XOR<teamsUpdateWithoutNotificationsInput, teamsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<teamsCreateWithoutNotificationsInput, teamsUncheckedCreateWithoutNotificationsInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutNotificationsInput, teamsUncheckedUpdateWithoutNotificationsInput>
  }

  export type teamsUpdateWithoutNotificationsInput = {
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teamInvitations?: teamInvitationsUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUpdateManyWithoutTeamsNestedInput
    User?: UserUpdateOneRequiredWithoutTeamsNestedInput
    transactions?: transactionsUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutTeamsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUpdateManyWithoutUserNestedInput
    teams?: teamsUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUncheckedUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutUserNestedInput
    teams?: teamsUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type notificationsCreateWithoutTeamsInput = {
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
    User: UserCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutTeamsInput = {
    id?: number
    userId: number
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
  }

  export type notificationsCreateOrConnectWithoutTeamsInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutTeamsInput, notificationsUncheckedCreateWithoutTeamsInput>
  }

  export type notificationsCreateManyTeamsInputEnvelope = {
    data: notificationsCreateManyTeamsInput | notificationsCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type teamInvitationsCreateWithoutTeamsInput = {
    token?: string
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
    User: UserCreateNestedOneWithoutTeamInvitationsInput
  }

  export type teamInvitationsUncheckedCreateWithoutTeamsInput = {
    id?: number
    token?: string
    inviterId: number
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type teamInvitationsCreateOrConnectWithoutTeamsInput = {
    where: teamInvitationsWhereUniqueInput
    create: XOR<teamInvitationsCreateWithoutTeamsInput, teamInvitationsUncheckedCreateWithoutTeamsInput>
  }

  export type teamInvitationsCreateManyTeamsInputEnvelope = {
    data: teamInvitationsCreateManyTeamsInput | teamInvitationsCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type teamMembersCreateWithoutTeamsInput = {
    role?: string | null
    joinedAt?: Date | string | null
    User: UserCreateNestedOneWithoutTeamMembersInput
  }

  export type teamMembersUncheckedCreateWithoutTeamsInput = {
    userId: number
    role?: string | null
    joinedAt?: Date | string | null
  }

  export type teamMembersCreateOrConnectWithoutTeamsInput = {
    where: teamMembersWhereUniqueInput
    create: XOR<teamMembersCreateWithoutTeamsInput, teamMembersUncheckedCreateWithoutTeamsInput>
  }

  export type teamMembersCreateManyTeamsInputEnvelope = {
    data: teamMembersCreateManyTeamsInput | teamMembersCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutTeamsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsUncheckedCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
  }

  export type transactionsCreateWithoutTeamsInput = {
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutTransactionsInput
    User: UserCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutTeamsInput = {
    id?: number
    userId: number
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactionsCreateOrConnectWithoutTeamsInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutTeamsInput, transactionsUncheckedCreateWithoutTeamsInput>
  }

  export type transactionsCreateManyTeamsInputEnvelope = {
    data: transactionsCreateManyTeamsInput | transactionsCreateManyTeamsInput[]
    skipDuplicates?: boolean
  }

  export type notificationsUpsertWithWhereUniqueWithoutTeamsInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutTeamsInput, notificationsUncheckedUpdateWithoutTeamsInput>
    create: XOR<notificationsCreateWithoutTeamsInput, notificationsUncheckedCreateWithoutTeamsInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutTeamsInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutTeamsInput, notificationsUncheckedUpdateWithoutTeamsInput>
  }

  export type notificationsUpdateManyWithWhereWithoutTeamsInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutTeamsInput>
  }

  export type teamInvitationsUpsertWithWhereUniqueWithoutTeamsInput = {
    where: teamInvitationsWhereUniqueInput
    update: XOR<teamInvitationsUpdateWithoutTeamsInput, teamInvitationsUncheckedUpdateWithoutTeamsInput>
    create: XOR<teamInvitationsCreateWithoutTeamsInput, teamInvitationsUncheckedCreateWithoutTeamsInput>
  }

  export type teamInvitationsUpdateWithWhereUniqueWithoutTeamsInput = {
    where: teamInvitationsWhereUniqueInput
    data: XOR<teamInvitationsUpdateWithoutTeamsInput, teamInvitationsUncheckedUpdateWithoutTeamsInput>
  }

  export type teamInvitationsUpdateManyWithWhereWithoutTeamsInput = {
    where: teamInvitationsScalarWhereInput
    data: XOR<teamInvitationsUpdateManyMutationInput, teamInvitationsUncheckedUpdateManyWithoutTeamsInput>
  }

  export type teamMembersUpsertWithWhereUniqueWithoutTeamsInput = {
    where: teamMembersWhereUniqueInput
    update: XOR<teamMembersUpdateWithoutTeamsInput, teamMembersUncheckedUpdateWithoutTeamsInput>
    create: XOR<teamMembersCreateWithoutTeamsInput, teamMembersUncheckedCreateWithoutTeamsInput>
  }

  export type teamMembersUpdateWithWhereUniqueWithoutTeamsInput = {
    where: teamMembersWhereUniqueInput
    data: XOR<teamMembersUpdateWithoutTeamsInput, teamMembersUncheckedUpdateWithoutTeamsInput>
  }

  export type teamMembersUpdateManyWithWhereWithoutTeamsInput = {
    where: teamMembersScalarWhereInput
    data: XOR<teamMembersUpdateManyMutationInput, teamMembersUncheckedUpdateManyWithoutTeamsInput>
  }

  export type UserUpsertWithoutTeamsInput = {
    update: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type UserUpdateWithoutTeamsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUncheckedUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type transactionsUpsertWithWhereUniqueWithoutTeamsInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutTeamsInput, transactionsUncheckedUpdateWithoutTeamsInput>
    create: XOR<transactionsCreateWithoutTeamsInput, transactionsUncheckedCreateWithoutTeamsInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutTeamsInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutTeamsInput, transactionsUncheckedUpdateWithoutTeamsInput>
  }

  export type transactionsUpdateManyWithWhereWithoutTeamsInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutTeamsInput>
  }

  export type changeRequestsCreateWithoutTransactionsInput = {
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    User: UserCreateNestedOneWithoutChangeRequestsInput
  }

  export type changeRequestsUncheckedCreateWithoutTransactionsInput = {
    id?: number
    requesterId: number
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type changeRequestsCreateOrConnectWithoutTransactionsInput = {
    where: changeRequestsWhereUniqueInput
    create: XOR<changeRequestsCreateWithoutTransactionsInput, changeRequestsUncheckedCreateWithoutTransactionsInput>
  }

  export type changeRequestsCreateManyTransactionsInputEnvelope = {
    data: changeRequestsCreateManyTransactionsInput | changeRequestsCreateManyTransactionsInput[]
    skipDuplicates?: boolean
  }

  export type teamsCreateWithoutTransactionsInput = {
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersCreateNestedManyWithoutTeamsInput
    User: UserCreateNestedOneWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutTransactionsInput = {
    id?: number
    teamName: string
    ownerId: number
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutTransactionsInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutTransactionsInput, teamsUncheckedCreateWithoutTransactionsInput>
  }

  export type UserCreateWithoutTransactionsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersCreateNestedManyWithoutUserInput
    teams?: teamsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsUncheckedCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutUserInput
    teams?: teamsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type changeRequestsUpsertWithWhereUniqueWithoutTransactionsInput = {
    where: changeRequestsWhereUniqueInput
    update: XOR<changeRequestsUpdateWithoutTransactionsInput, changeRequestsUncheckedUpdateWithoutTransactionsInput>
    create: XOR<changeRequestsCreateWithoutTransactionsInput, changeRequestsUncheckedCreateWithoutTransactionsInput>
  }

  export type changeRequestsUpdateWithWhereUniqueWithoutTransactionsInput = {
    where: changeRequestsWhereUniqueInput
    data: XOR<changeRequestsUpdateWithoutTransactionsInput, changeRequestsUncheckedUpdateWithoutTransactionsInput>
  }

  export type changeRequestsUpdateManyWithWhereWithoutTransactionsInput = {
    where: changeRequestsScalarWhereInput
    data: XOR<changeRequestsUpdateManyMutationInput, changeRequestsUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type teamsUpsertWithoutTransactionsInput = {
    update: XOR<teamsUpdateWithoutTransactionsInput, teamsUncheckedUpdateWithoutTransactionsInput>
    create: XOR<teamsCreateWithoutTransactionsInput, teamsUncheckedCreateWithoutTransactionsInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutTransactionsInput, teamsUncheckedUpdateWithoutTransactionsInput>
  }

  export type teamsUpdateWithoutTransactionsInput = {
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUpdateManyWithoutTeamsNestedInput
    User?: UserUpdateOneRequiredWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUpdateManyWithoutUserNestedInput
    teams?: teamsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUncheckedUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutUserNestedInput
    teams?: teamsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutChangeRequestsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notifications?: notificationsCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersCreateNestedManyWithoutUserInput
    teams?: teamsCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChangeRequestsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsUncheckedCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutUserInput
    teams?: teamsUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChangeRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChangeRequestsInput, UserUncheckedCreateWithoutChangeRequestsInput>
  }

  export type transactionsCreateWithoutChangeRequestsInput = {
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    teams: teamsCreateNestedOneWithoutTransactionsInput
    User: UserCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutChangeRequestsInput = {
    id?: number
    teamId: number
    userId: number
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type transactionsCreateOrConnectWithoutChangeRequestsInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutChangeRequestsInput, transactionsUncheckedCreateWithoutChangeRequestsInput>
  }

  export type UserUpsertWithoutChangeRequestsInput = {
    update: XOR<UserUpdateWithoutChangeRequestsInput, UserUncheckedUpdateWithoutChangeRequestsInput>
    create: XOR<UserCreateWithoutChangeRequestsInput, UserUncheckedCreateWithoutChangeRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChangeRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChangeRequestsInput, UserUncheckedUpdateWithoutChangeRequestsInput>
  }

  export type UserUpdateWithoutChangeRequestsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUpdateManyWithoutUserNestedInput
    teams?: teamsUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChangeRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUncheckedUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutUserNestedInput
    teams?: teamsUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type transactionsUpsertWithoutChangeRequestsInput = {
    update: XOR<transactionsUpdateWithoutChangeRequestsInput, transactionsUncheckedUpdateWithoutChangeRequestsInput>
    create: XOR<transactionsCreateWithoutChangeRequestsInput, transactionsUncheckedCreateWithoutChangeRequestsInput>
    where?: transactionsWhereInput
  }

  export type transactionsUpdateToOneWithWhereWithoutChangeRequestsInput = {
    where?: transactionsWhereInput
    data: XOR<transactionsUpdateWithoutChangeRequestsInput, transactionsUncheckedUpdateWithoutChangeRequestsInput>
  }

  export type transactionsUpdateWithoutChangeRequestsInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teams?: teamsUpdateOneRequiredWithoutTransactionsNestedInput
    User?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutChangeRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutPasswordResetsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersCreateNestedManyWithoutUserInput
    teams?: teamsCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordResetsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutUserInput
    teams?: teamsUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordResetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
  }

  export type UserUpsertWithoutPasswordResetsInput = {
    update: XOR<UserUpdateWithoutPasswordResetsInput, UserUncheckedUpdateWithoutPasswordResetsInput>
    create: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordResetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordResetsInput, UserUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type UserUpdateWithoutPasswordResetsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUpdateManyWithoutUserNestedInput
    teams?: teamsUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordResetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutUserNestedInput
    teams?: teamsUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTeamInvitationsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersCreateNestedManyWithoutUserInput
    teams?: teamsCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamInvitationsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutUserInput
    teams?: teamsUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamInvitationsInput, UserUncheckedCreateWithoutTeamInvitationsInput>
  }

  export type teamsCreateWithoutTeamInvitationsInput = {
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersCreateNestedManyWithoutTeamsInput
    User: UserCreateNestedOneWithoutTeamsInput
    transactions?: transactionsCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutTeamInvitationsInput = {
    id?: number
    teamName: string
    ownerId: number
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutTeamsInput
    teamMembers?: teamMembersUncheckedCreateNestedManyWithoutTeamsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutTeamInvitationsInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutTeamInvitationsInput, teamsUncheckedCreateWithoutTeamInvitationsInput>
  }

  export type UserUpsertWithoutTeamInvitationsInput = {
    update: XOR<UserUpdateWithoutTeamInvitationsInput, UserUncheckedUpdateWithoutTeamInvitationsInput>
    create: XOR<UserCreateWithoutTeamInvitationsInput, UserUncheckedCreateWithoutTeamInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamInvitationsInput, UserUncheckedUpdateWithoutTeamInvitationsInput>
  }

  export type UserUpdateWithoutTeamInvitationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUpdateManyWithoutUserNestedInput
    teams?: teamsUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutUserNestedInput
    teams?: teamsUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type teamsUpsertWithoutTeamInvitationsInput = {
    update: XOR<teamsUpdateWithoutTeamInvitationsInput, teamsUncheckedUpdateWithoutTeamInvitationsInput>
    create: XOR<teamsCreateWithoutTeamInvitationsInput, teamsUncheckedCreateWithoutTeamInvitationsInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutTeamInvitationsInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutTeamInvitationsInput, teamsUncheckedUpdateWithoutTeamInvitationsInput>
  }

  export type teamsUpdateWithoutTeamInvitationsInput = {
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUpdateManyWithoutTeamsNestedInput
    User?: UserUpdateOneRequiredWithoutTeamsNestedInput
    transactions?: transactionsUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutTeamInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutTeamsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type teamsCreateWithoutTeamMembersInput = {
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutTeamsInput
    User: UserCreateNestedOneWithoutTeamsInput
    transactions?: transactionsCreateNestedManyWithoutTeamsInput
  }

  export type teamsUncheckedCreateWithoutTeamMembersInput = {
    id?: number
    teamName: string
    ownerId: number
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutTeamsInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutTeamsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type teamsCreateOrConnectWithoutTeamMembersInput = {
    where: teamsWhereUniqueInput
    create: XOR<teamsCreateWithoutTeamMembersInput, teamsUncheckedCreateWithoutTeamMembersInput>
  }

  export type UserCreateWithoutTeamMembersInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsCreateNestedManyWithoutUserInput
    teams?: teamsCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamMembersInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    gender?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    changeRequests?: changeRequestsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: passwordResetsUncheckedCreateNestedManyWithoutUserInput
    teamInvitations?: teamInvitationsUncheckedCreateNestedManyWithoutUserInput
    teams?: teamsUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
  }

  export type teamsUpsertWithoutTeamMembersInput = {
    update: XOR<teamsUpdateWithoutTeamMembersInput, teamsUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<teamsCreateWithoutTeamMembersInput, teamsUncheckedCreateWithoutTeamMembersInput>
    where?: teamsWhereInput
  }

  export type teamsUpdateToOneWithWhereWithoutTeamMembersInput = {
    where?: teamsWhereInput
    data: XOR<teamsUpdateWithoutTeamMembersInput, teamsUncheckedUpdateWithoutTeamMembersInput>
  }

  export type teamsUpdateWithoutTeamMembersInput = {
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutTeamsNestedInput
    User?: UserUpdateOneRequiredWithoutTeamsNestedInput
    transactions?: transactionsUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutTeamsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type UserUpsertWithoutTeamMembersInput = {
    update: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type UserUpdateWithoutTeamMembersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutUserNestedInput
    teams?: teamsUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: passwordResetsUncheckedUpdateManyWithoutUserNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutUserNestedInput
    teams?: teamsUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type changeRequestsCreateManyUserInput = {
    id?: number
    targetTransactionId: number
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type notificationsCreateManyUserInput = {
    id?: number
    teamId?: number | null
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
  }

  export type passwordResetsCreateManyUserInput = {
    id?: number
    token?: string
    expiresAt?: Date | string
    used?: boolean
    createdAt?: Date | string | null
  }

  export type teamInvitationsCreateManyUserInput = {
    id?: number
    token?: string
    teamId: number
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type teamMembersCreateManyUserInput = {
    teamId: number
    role?: string | null
    joinedAt?: Date | string | null
  }

  export type teamsCreateManyUserInput = {
    id?: number
    teamName: string
    currency?: string
    budget?: Decimal | DecimalJsLike | number | string | null
    incomeGoal?: Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type transactionsCreateManyUserInput = {
    id?: number
    teamId: number
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type changeRequestsUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUpdateOneRequiredWithoutChangeRequestsNestedInput
  }

  export type changeRequestsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetTransactionId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type changeRequestsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetTransactionId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teams?: teamsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type passwordResetsUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type passwordResetsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type passwordResetsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamInvitationsUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teams?: teamsUpdateOneRequiredWithoutTeamInvitationsNestedInput
  }

  export type teamInvitationsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamInvitationsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamMembersUpdateWithoutUserInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teams?: teamsUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type teamMembersUncheckedUpdateWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamMembersUncheckedUpdateManyWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamsUpdateWithoutUserInput = {
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUpdateManyWithoutTeamsNestedInput
    transactions?: transactionsUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamInvitations?: teamInvitationsUncheckedUpdateManyWithoutTeamsNestedInput
    teamMembers?: teamMembersUncheckedUpdateManyWithoutTeamsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type teamsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamName?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    budget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    incomeGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allowMemberViewReport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsUpdateWithoutUserInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutTransactionsNestedInput
    teams?: teamsUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsCreateManyTeamsInput = {
    id?: number
    userId: number
    type: string
    message: string
    isRead?: boolean | null
    relatedResourceId?: number | null
    createdAt?: Date | string | null
  }

  export type teamInvitationsCreateManyTeamsInput = {
    id?: number
    token?: string
    inviterId: number
    inviteeEmail: string
    status?: $Enums.invitation_status
    createdAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type teamMembersCreateManyTeamsInput = {
    userId: number
    role?: string | null
    joinedAt?: Date | string | null
  }

  export type transactionsCreateManyTeamsInput = {
    id?: number
    userId: number
    amount: Decimal | DecimalJsLike | number | string
    type: $Enums.transaction_type
    categoryName?: string | null
    categoryIcon?: string | null
    description?: string | null
    transactionDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type notificationsUpdateWithoutTeamsInput = {
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedResourceId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamInvitationsUpdateWithoutTeamsInput = {
    token?: StringFieldUpdateOperationsInput | string
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutTeamInvitationsNestedInput
  }

  export type teamInvitationsUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    inviterId?: IntFieldUpdateOperationsInput | number
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamInvitationsUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    inviterId?: IntFieldUpdateOperationsInput | number
    inviteeEmail?: StringFieldUpdateOperationsInput | string
    status?: Enuminvitation_statusFieldUpdateOperationsInput | $Enums.invitation_status
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamMembersUpdateWithoutTeamsInput = {
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type teamMembersUncheckedUpdateWithoutTeamsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teamMembersUncheckedUpdateManyWithoutTeamsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    role?: NullableStringFieldUpdateOperationsInput | string | null
    joinedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsUpdateWithoutTeamsInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUpdateManyWithoutTransactionsNestedInput
    User?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    changeRequests?: changeRequestsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: Enumtransaction_typeFieldUpdateOperationsInput | $Enums.transaction_type
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryIcon?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    transactionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type changeRequestsCreateManyTransactionsInput = {
    id?: number
    requesterId: number
    type: string
    status?: $Enums.change_request_status
    reason: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type changeRequestsUpdateWithoutTransactionsInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutChangeRequestsNestedInput
  }

  export type changeRequestsUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type changeRequestsUncheckedUpdateManyWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: Enumchange_request_statusFieldUpdateOperationsInput | $Enums.change_request_status
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}