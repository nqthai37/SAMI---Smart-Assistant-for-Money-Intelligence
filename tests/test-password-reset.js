// File: test-password-reset.js
// Test ch·ª©c nƒÉng reset password trong development mode

const axios = require('axios');

const BASE_URL = 'http://localhost:3000'; // ƒê·ªïi port n·∫øu c·∫ßn

async function testPasswordReset() {
  console.log('üß™ Testing Password Reset Flow...\n');

  try {
    // Test 1: Forgot Password
    console.log('1Ô∏è‚É£ Testing Forgot Password...');
    const forgotResponse = await axios.post(`${BASE_URL}/auth/forgot-password`, {
      email: 'test@example.com'
    });
    
    console.log('‚úÖ Forgot Password Response:', forgotResponse.data);
    
    // Trong development mode, ch√∫ng ta s·∫Ω nh·∫≠n ƒë∆∞·ª£c resetToken
    const resetToken = forgotResponse.data.resetToken;
    if (!resetToken) {
      console.log('‚ùå No reset token received (production mode?)');
      return;
    }
    
    console.log(`üîë Reset Token: ${resetToken}\n`);
    
    // Test 2: Reset Password v·ªõi token h·ª£p l·ªá
    console.log('2Ô∏è‚É£ Testing Reset Password with valid token...');
    const resetResponse = await axios.post(`${BASE_URL}/auth/reset-password`, {
      token: resetToken,
      newPassword: 'newpassword123'
    });
    
    console.log('‚úÖ Reset Password Response:', resetResponse.data);
    
    // Test 3: Th·ª≠ reset v·ªõi token ƒë√£ s·ª≠ d·ª•ng
    console.log('\n3Ô∏è‚É£ Testing Reset Password with used token...');
    try {
      const usedTokenResponse = await axios.post(`${BASE_URL}/auth/reset-password`, {
        token: resetToken,
        newPassword: 'anothernewpassword'
      });
      console.log('‚ùå Should have failed with used token');
    } catch (error) {
      console.log('‚úÖ Expected error with used token:', error.response.data.message);
    }
    
    // Test 4: Th·ª≠ reset v·ªõi token kh√¥ng h·ª£p l·ªá
    console.log('\n4Ô∏è‚É£ Testing Reset Password with invalid token...');
    try {
      const invalidTokenResponse = await axios.post(`${BASE_URL}/auth/reset-password`, {
        token: 'invalid-token-123',
        newPassword: 'newpassword456'
      });
      console.log('‚ùå Should have failed with invalid token');
    } catch (error) {
      console.log('‚úÖ Expected error with invalid token:', error.response.data.message);
    }
    
  } catch (error) {
    console.error('‚ùå Test Error:', error.response?.data || error.message);
  }
}

// Test v·ªõi c√°c validation cases
async function testValidation() {
  console.log('\nüîç Testing Validation...\n');
  
  try {
    // Test forgot password without email
    console.log('1Ô∏è‚É£ Testing forgot password without email...');
    try {
      await axios.post(`${BASE_URL}/auth/forgot-password`, {});
    } catch (error) {
      console.log('‚úÖ Expected validation error:', error.response.data.message);
    }
    
    // Test reset password without token
    console.log('\n2Ô∏è‚É£ Testing reset password without token...');
    try {
      await axios.post(`${BASE_URL}/auth/reset-password`, {
        newPassword: 'test123'
      });
    } catch (error) {
      console.log('‚úÖ Expected validation error:', error.response.data.message);
    }
    
    // Test reset password with short password
    console.log('\n3Ô∏è‚É£ Testing reset password with short password...');
    try {
      await axios.post(`${BASE_URL}/auth/reset-password`, {
        token: 'dummy-token',
        newPassword: '123'
      });
    } catch (error) {
      console.log('‚úÖ Expected validation error:', error.response.data.message);
    }
    
  } catch (error) {
    console.error('‚ùå Validation Test Error:', error.response?.data || error.message);
  }
}

// Ch·∫°y tests
async function runTests() {
  console.log('üöÄ Starting Password Reset Tests...\n');
  console.log('üìù Make sure server is running on localhost:3000\n');
  
  await testPasswordReset();
  await testValidation();
  
  console.log('\n‚ú® All tests completed!');
}

runTests().catch(console.error);
