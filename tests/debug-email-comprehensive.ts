// Comprehensive email debugging
import { config } from 'dotenv';
config();

async function debugEmailIssue() {
  console.log('üîç DEBUGGING EMAIL ISSUE - T·∫°i sao kh√¥ng nh·∫≠n ƒë∆∞·ª£c email\n');
  
  // 1. Check environment variables
  console.log('1Ô∏è‚É£ KI·ªÇM TRA C·∫§U H√åNH EMAIL:');
  console.log('EMAIL_USER:', process.env.EMAIL_USER);
  console.log('EMAIL_PASSWORD length:', process.env.EMAIL_PASSWORD?.length);
  console.log('EMAIL_PASSWORD (masked):', process.env.EMAIL_PASSWORD?.replace(/./g, '*'));
  
  // Validate App Password format
  const emailPassword = process.env.EMAIL_PASSWORD;
  if (emailPassword?.includes(' ')) {
    console.log('‚ùå L·ªñI: App Password c√≤n d·∫•u c√°ch!');
    console.log('   Hi·ªán t·∫°i:', `"${emailPassword}"`);
    console.log('   C·∫ßn s·ª≠a th√†nh:', `"${emailPassword.replace(/\s/g, '')}"`);
    return;
  } else if (emailPassword?.length !== 16) {
    console.log('‚ùå L·ªñI: App Password kh√¥ng ƒë√∫ng ƒë·ªô d√†i 16 k√Ω t·ª±!');
    console.log('   ƒê·ªô d√†i hi·ªán t·∫°i:', emailPassword?.length);
    return;
  } else {
    console.log('‚úÖ App Password format: OK');
  }
  
  // 2. Test email service connection
  console.log('\n2Ô∏è‚É£ KI·ªÇM TRA K·∫æT N·ªêI EMAIL SERVICE:');
  try {
    const EmailService = (await import('./service/emailService.js')).default;
    
    console.log('Testing SMTP connection...');
    const isHealthy = await EmailService.verifyConnection();
    
    if (isHealthy) {
      console.log('‚úÖ SMTP Connection: SUCCESS');
      
      // 3. Test actual email sending
      console.log('\n3Ô∏è‚É£ TEST G·ª¨I EMAIL TH·ª∞C T·∫æ:');
      console.log('G·ª≠i email test ƒë·∫øn:', 'thai37205@gmail.com');
      
      const testResult = await EmailService.sendPasswordReset(
        'thai37205@gmail.com',
        'test-reset-token-' + Date.now()
      );
      
      if (testResult.success) {
        console.log('‚úÖ EMAIL ƒê√É G·ª¨I TH√ÄNH C√îNG!');
        console.log('Message ID:', testResult.messageId);
        console.log('\nüìß KI·ªÇM TRA EMAIL:');
        console.log('1. V√†o h·ªôp th∆∞ ƒë·∫øn c·ªßa thai37205@gmail.com');
        console.log('2. Ki·ªÉm tra th∆∞ m·ª•c Spam/Junk');
        console.log('3. T√¨m email t·ª´: alertsnoreply.sami@gmail.com');
        console.log('4. Ch·ªß ƒë·ªÅ: "üîê Password Reset Request - SAMI"');
        
        // Check common email delivery issues
        console.log('\nüîç N·∫æU KH√îNG TH·∫§Y EMAIL, KI·ªÇM TRA:');
        console.log('üìÅ Th∆∞ m·ª•c Spam/Junk Mail');
        console.log('üîí B·ªô l·ªçc email c·ªßa Gmail');
        console.log('üì® Tab "Promotions" ho·∫∑c "Updates" trong Gmail');
        console.log('‚è∞ ƒê·ª£i 1-2 ph√∫t (ƒë√¥i khi c√≥ ƒë·ªô tr·ªÖ)');
        
      } else {
        console.log('‚ùå EMAIL G·ª¨I TH·∫§T B·∫†I!');
        console.log('L·ªói:', testResult.error);
      }
      
    } else {
      console.log('‚ùå SMTP Connection: FAILED');
      console.log('Ki·ªÉm tra l·∫°i App Password v√† c√†i ƒë·∫∑t Gmail');
    }
    
  } catch (error) {
    console.log('‚ùå L·ªñI EMAIL SERVICE:', error);
    
    if (error.message?.includes('Invalid login')) {
      console.log('\nüîê L·ªñI X√ÅC TH·ª∞C - GI·∫¢I PH√ÅP:');
      console.log('1. Ki·ªÉm tra App Password ƒë√£ ƒë√∫ng ch∆∞a');
      console.log('2. ƒê·∫£m b·∫£o 2FA ƒë√£ b·∫≠t');
      console.log('3. T·∫°o l·∫°i App Password m·ªõi');
    }
  }
  
  // 4. Check authService logic
  console.log('\n4Ô∏è‚É£ KI·ªÇM TRA LOGIC AUTHSERVICE:');
  console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined');
  console.log('Mode:', process.env.NODE_ENV === 'production' ? 'Production (g·ª≠i email th·∫≠t)' : 'Development (c√≥ th·ªÉ ch·ªâ log)');
}

debugEmailIssue().catch(console.error);
